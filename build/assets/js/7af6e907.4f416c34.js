"use strict";(self.webpackChunkintegration_continue=self.webpackChunkintegration_continue||[]).push([[7857],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,v=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(v,s(s({ref:t},u),{},{components:n})):a.createElement(v,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3444:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={id:"lintegration-et-la-livraison-continues-avec-la-demarche-devops",title:"L'int\xe9gration et la livraison continues avec la d\xe9marche DevOp",description:"My document description",slug:"/lintegration-et-la-livraison-continues-avec-la-demarche-devops"},l="L'int\xe9gration et la livraison continues avec la d\xe9marche DevOps",p={unversionedId:"Gestion du SI/DevOps/lintegration-et-la-livraison-continues-avec-la-demarche-devops",id:"Gestion du SI/DevOps/lintegration-et-la-livraison-continues-avec-la-demarche-devops",isDocsHomePage:!1,title:"L'int\xe9gration et la livraison continues avec la d\xe9marche DevOp",description:"My document description",source:"@site/docs\\Gestion du SI\\DevOps\\L'int\xe9gration et la livraison continues avec la d\xe9marche DevOps.md",sourceDirName:"Gestion du SI/DevOps",slug:"/lintegration-et-la-livraison-continues-avec-la-demarche-devops",permalink:"/docs/lintegration-et-la-livraison-continues-avec-la-demarche-devops",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Gestion du SI\\DevOps\\L'int\xe9gration et la livraison continues avec la d\xe9marche DevOps.md",tags:[],version:"current",frontMatter:{id:"lintegration-et-la-livraison-continues-avec-la-demarche-devops",title:"L'int\xe9gration et la livraison continues avec la d\xe9marche DevOp",description:"My document description",slug:"/lintegration-et-la-livraison-continues-avec-la-demarche-devops"},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/docs/Base de donn\xe9e/congratulations"},next:{title:"L'int\xe9gration et la livraison continues avec la d\xe9marche DevOps",permalink:"/docs/Gestion du SI/Management d'\xe9quipe/L'int\xe9gration et la livraison continues avec la d\xe9marche DevOps"}},u=[{value:"Qu&#39;est-ce que l&#39;int\xe9gration continue ?",id:"quest-ce-que-lint\xe9gration-continue-",children:[{value:"\xc9tape 1 : Planifiez votre d\xe9veloppement",id:"\xe9tape-1--planifiez-votre-d\xe9veloppement",children:[],level:3},{value:"\xc9tape 2 : Compilez et int\xe9grez votre code",id:"\xe9tape-2--compilez-et-int\xe9grez-votre-code",children:[{value:"Le contr\xf4le de code source",id:"le-contr\xf4le-de-code-source",children:[],level:4},{value:"L&#39;orchestrateur",id:"lorchestrateur",children:[],level:4}],level:3},{value:"\xc9tape 3 : Testez votre code",id:"\xe9tape-3--testez-votre-code",children:[{value:"Les tests unitaires",id:"les-tests-unitaires",children:[],level:4}],level:3},{value:"\xc9tape 4 : Mesurez la qualit\xe9 de votre code",id:"\xe9tape-4--mesurez-la-qualit\xe9-de-votre-code",children:[],level:3},{value:"\xc9tape 5 : G\xe9rez les livrables de votre application",id:"\xe9tape-5--g\xe9rez-les-livrables-de-votre-application",children:[],level:3},{value:"Utilisez GitLab pour mettre en place un pipeline CI/CD",id:"utilisez-gitlab-pour-mettre-en-place-un-pipeline-cicd",children:[],level:3}],level:2},{value:"Planifiez votre d\xe9veloppement",id:"planifiez-votre-d\xe9veloppement",children:[{value:"Cr\xe9ez votre projet GitLab",id:"cr\xe9ez-votre-projet-gitlab",children:[],level:3},{value:"Cr\xe9ez votre premi\xe8re epic",id:"cr\xe9ez-votre-premi\xe8re-epic",children:[],level:3},{value:"Cr\xe9ez votre premi\xe8re user story",id:"cr\xe9ez-votre-premi\xe8re-user-story",children:[],level:3},{value:"Organisez votre backlog",id:"organisez-votre-backlog",children:[],level:3}],level:2},{value:"Int\xe9grez votre code en continu",id:"int\xe9grez-votre-code-en-continu",children:[{value:"Clonez le projet sur votre poste",id:"clonez-le-projet-sur-votre-poste",children:[],level:3},{value:"Activez l&#39;int\xe9gration continue sur votre projet avec GitLab",id:"activez-lint\xe9gration-continue-sur-votre-projet-avec-gitlab",children:[{value:"D\xe9finissez les \xe9tapes du pipeline",id:"d\xe9finissez-les-\xe9tapes-du-pipeline",children:[],level:4},{value:"Acc\xe9l\xe9rez les \xe9tapes avec le cache",id:"acc\xe9l\xe9rez-les-\xe9tapes-avec-le-cache",children:[],level:4},{value:"D\xe9finissez les jobs \xe0 effectuer",id:"d\xe9finissez-les-jobs-\xe0-effectuer",children:[],level:4}],level:3},{value:"Lancez votre pipeline CI/CD",id:"lancez-votre-pipeline-cicd",children:[],level:3},{value:"Et si l&#39;application contient un bug ?",id:"et-si-lapplication-contient-un-bug-",children:[{value:"Lancez votre pipeline avec un bug",id:"lancez-votre-pipeline-avec-un-bug",children:[],level:4},{value:"G\xe9rez le fix du bug sur GitLab",id:"g\xe9rez-le-fix-du-bug-sur-gitlab",children:[],level:4},{value:"Corrigez votre bug",id:"corrigez-votre-bug",children:[],level:4}],level:3}],level:2},{value:"Garantissez la qualit\xe9 de votre code",id:"garantissez-la-qualit\xe9-de-votre-code",children:[{value:"Mesurez la qualit\xe9 de votre code",id:"mesurez-la-qualit\xe9-de-votre-code",children:[],level:3},{value:"Packagez votre application pour la d\xe9ployer",id:"packagez-votre-application-pour-la-d\xe9ployer",children:[],level:3},{value:"Les autres outils de l&#39;int\xe9gration continue",id:"les-autres-outils-de-lint\xe9gration-continue",children:[],level:3}],level:2},{value:"Exercice ! Mettez en place le pipeline CI de votre application avec GitLab",id:"exercice--mettez-en-place-le-pipeline-ci-de-votre-application-avec-gitlab",children:[{value:"Description",id:"description",children:[{value:"Objectif",id:"objectif",children:[],level:4},{value:"Donn\xe9es",id:"donn\xe9es",children:[],level:4},{value:"Instructions",id:"instructions",children:[],level:4}],level:3},{value:"Question",id:"question",children:[],level:3},{value:"R\xe9ponse",id:"r\xe9ponse",children:[],level:3}],level:2},{value:"Qu&#39;est-ce que la livraison continue ?",id:"quest-ce-que-la-livraison-continue-",children:[{value:"\xc9tape 1 : Codifiez votre infrastructure avec l&#39;Infrastructure-as-Code",id:"\xe9tape-1--codifiez-votre-infrastructure-avec-linfrastructure-as-code",children:[],level:3},{value:"\xc9tape 2 : D\xe9ployez votre application",id:"\xe9tape-2--d\xe9ployez-votre-application",children:[],level:3},{value:"\xc9tape 3 : Testez votre application",id:"\xe9tape-3--testez-votre-application",children:[{value:"Test d&#39;acceptance",id:"test-dacceptance",children:[],level:4},{value:"Test de performance",id:"test-de-performance",children:[],level:4},{value:"Smoke test",id:"smoke-test",children:[],level:4}],level:3},{value:"\xc9tape 4 : Supervisez le comportement de votre application",id:"\xe9tape-4--supervisez-le-comportement-de-votre-application",children:[{value:"Le Mean-Time-Between-Failure",id:"le-mean-time-between-failure",children:[],level:4},{value:"Le Mean-Time-To-Recover",id:"le-mean-time-to-recover",children:[],level:4}],level:3},{value:"\xc9tape 5 : Mettez en place des notifications d&#39;alertes",id:"\xe9tape-5--mettez-en-place-des-notifications-dalertes",children:[],level:3}],level:2},{value:"Codifiez votre infrastructure",id:"codifiez-votre-infrastructure",children:[{value:"Construisez les images de votre application avec Docker",id:"construisez-les-images-de-votre-application-avec-docker",children:[],level:3},{value:"D\xe9ployez votre application avec Docker Compose",id:"d\xe9ployez-votre-application-avec-docker-compose",children:[],level:3}],level:2},{value:"D\xe9ployez et testez votre code sur diff\xe9rents environnements",id:"d\xe9ployez-et-testez-votre-code-sur-diff\xe9rents-environnements",children:[{value:"Pr\xe9parez votre environnement de travail",id:"pr\xe9parez-votre-environnement-de-travail",children:[],level:3}],level:2},{value:"Monitorez votre application",id:"monitorez-votre-application",children:[{value:"Supervisez votre application avec Prometheus",id:"supervisez-votre-application-avec-prometheus",children:[],level:3},{value:"Mettez en place des notifications Slack",id:"mettez-en-place-des-notifications-slack",children:[],level:3}],level:2},{value:"Annexes",id:"annexes",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lint\xe9gration-et-la-livraison-continues-avec-la-d\xe9marche-devops"},"L'int\xe9gration et la livraison continues avec la d\xe9marche DevOps"),(0,i.kt)("h2",{id:"quest-ce-que-lint\xe9gration-continue-"},"Qu'est-ce que l'int\xe9gration continue ?"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"L'int\xe9gration et la livraison continues"),", ou en anglais ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Continuous Integration and Continuous Delivery (CI/CD)"))," permettent de :"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"acc\xe9l\xe9rer le ",(0,i.kt)("em",{parentName:"strong"},"Time-to-Market"))," (le temps de d\xe9veloppement et de mise en production d'une fonctionnalit\xe9) ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"r\xe9duire les erreurs")," lors des livraisons ;"),(0,i.kt)("li",{parentName:"ul"},"assurer une ",(0,i.kt)("strong",{parentName:"li"},"continuit\xe9 de service")," des applications."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"L'int\xe9gration continue")," est un ensemble de pratiques utilis\xe9es en g\xe9nie logiciel, consistant \xe0 v\xe9rifier, \xe0 chaque modification de code source que le r\xe9sultat des modifications ne produit pas de r\xe9gression dans l'application d\xe9velopp\xe9e."),(0,i.kt)("p",null,"Le principe de l'int\xe9gration continue est justement de d\xe9tecter ces probl\xe8mes d'int\xe9gration au plus t\xf4t dans le cycle de d\xe9veloppement."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"L'int\xe9gration continue va se faire en 5 \xe9tapes :"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"Planifiez votre d\xe9veloppement."),(0,i.kt)("li",{parentName:"ol"},"Compilez et int\xe9grez votre code."),(0,i.kt)("li",{parentName:"ol"},"Testez votre code."),(0,i.kt)("li",{parentName:"ol"},"Mesurez la qualit\xe9 de votre code."),(0,i.kt)("li",{parentName:"ol"},"G\xe9rez les livrables de votre application."))),(0,i.kt)("p",null,"Toutes les \xe9tapes se feront sur GitLab. Les \xe9tapes 2 \xe0 4 seront lanc\xe9es automatiquement gr\xe2ce \xe0 GitLab CI :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586109893555_1c3_illus_WHITEBG%20%280-00-17-23%29_4.png",alt:"\xc9tapes de l'int\xe9gration continue sur GitLab"})),(0,i.kt)("h3",{id:"\xe9tape-1--planifiez-votre-d\xe9veloppement"},"\xc9tape 1 : Planifiez votre d\xe9veloppement"),(0,i.kt)("p",null,"Afin de ",(0,i.kt)("strong",{parentName:"p"},"savoir quoi d\xe9velopper"),", il est n\xe9cessaire d'avoir \xe0 disposition un outil permettant la collaboration entre les d\xe9veloppeurs. Cet outil permettra notamment de g\xe9rer les diff\xe9rentes releases et toutes les fonctionnalit\xe9s, de garantir la priorit\xe9 du backlog, etc."),(0,i.kt)("p",null,"Intervenant tout au long du projet, la collaboration de toute l'\xe9quipe est n\xe9cessaire pour assurer la planification du projet. Cette planification est \xe9troitement li\xe9e \xe0 la m\xe9thodologie Scrum. Elle a pour but de d\xe9couper le projet en petites t\xe2ches \xe0 r\xe9aliser par toute l'\xe9quipe."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour collaborer avec vos \xe9quipes, vous pourrez utiliser ",(0,i.kt)("strong",{parentName:"p"},"Jira"),", ",(0,i.kt)("strong",{parentName:"p"},"GitLab"),", ",(0,i.kt)("strong",{parentName:"p"},"Confluence"),", ",(0,i.kt)("strong",{parentName:"p"},"ALM Octane")," ou encore ",(0,i.kt)("strong",{parentName:"p"},"Pivotal Tracker"),".")),(0,i.kt)("h3",{id:"\xe9tape-2--compilez-et-int\xe9grez-votre-code"},"\xc9tape 2 : Compilez et int\xe9grez votre code"),(0,i.kt)("h4",{id:"le-contr\xf4le-de-code-source"},"Le contr\xf4le de code source"),(0,i.kt)("p",null,"Le code source se doit d'\xeatre disponible \xe0 chaque instant sur un d\xe9p\xf4t central. Chaque d\xe9veloppement doit faire l'objet d'un suivi de r\xe9vision. Le code doit \xeatre compilable \xe0 partir d'une r\xe9cup\xe9ration fra\xeeche, et ne faire l'objet d'aucune d\xe9pendance externe. M\xeame s'il existe des notions de branche, la cr\xe9ation d'une branche doit \xeatre \xe9vit\xe9e le plus possible, privil\xe9giant le d\xe9veloppement sur la branche principale ; cela \xe9vite de maintenir plusieurs versions en parall\xe8le. Ce genre de pratique est appel\xe9 ",(0,i.kt)("em",{parentName:"p"},"trunk-based development"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour faire du contr\xf4le de source, vous retrouverez les outils ",(0,i.kt)("strong",{parentName:"p"},"Git"),", ",(0,i.kt)("strong",{parentName:"p"},"Subversion"),", ",(0,i.kt)("strong",{parentName:"p"},"GitHub"),", ",(0,i.kt)("strong",{parentName:"p"},"GitLab"),", ",(0,i.kt)("strong",{parentName:"p"},"Perforce")," ou bien ",(0,i.kt)("strong",{parentName:"p"},"Bitbucket"),".")),(0,i.kt)("h4",{id:"lorchestrateur"},"L'orchestrateur"),(0,i.kt)("p",null,"Ensuite, toutes les \xe9tapes doivent \xeatre automatis\xe9es par un ",(0,i.kt)("strong",{parentName:"p"},"orchestrateur"),", qui saura reproduire ces \xe9tapes et g\xe9rer les d\xe9pendances entre elles. De plus, l'utilisation d'un orchestrateur permet de donner acc\xe8s \xe0 tous, et \xe0 tout moment, \xe0 un tableau de bord qui donnera l'\xe9tat de sant\xe9 des \xe9tapes d'int\xe9gration continue. Ainsi, les d\xe9veloppeurs ont au plus t\xf4t la boucle de feedback n\xe9cessaire, afin de garantir que l'application soit pr\xeate \xe0 tout moment. De plus, l'orchestrateur permettra d'aller plus loin dans la livraison continue."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"L'orchestration des \xe9tapes de votre int\xe9gration continue peut se faire gr\xe2ce \xe0 des outils comme ",(0,i.kt)("strong",{parentName:"p"},"Jenkins"),", ",(0,i.kt)("strong",{parentName:"p"},"TeamCity"),", ",(0,i.kt)("strong",{parentName:"p"},"Azure DevOps"),", ",(0,i.kt)("strong",{parentName:"p"},"GitLab CI"),", ",(0,i.kt)("strong",{parentName:"p"},"Concours CI"),", ",(0,i.kt)("strong",{parentName:"p"},"Travis CI")," ou ",(0,i.kt)("strong",{parentName:"p"},"Bamboo"),".")),(0,i.kt)("p",null,"La premi\xe8re \xe9tape, et celle qui para\xeet la plus \xe9vidente, est de compiler le code de mani\xe8re continue. En effet, sans cette \xe9tape, le code est compil\xe9 manuellement sur le poste du d\xe9veloppeur, afin que ce dernier s'assure que son code compile."),(0,i.kt)("p",null,"Malheureusement, comme dit pr\xe9c\xe9demment, le d\xe9veloppeur ne s'assure pas que son code permet de bien compiler avec tous les autres d\xe9veloppements faits par l'\xe9quipe. \xc0 la prochaine livraison, un d\xe9veloppeur int\xe8gre alors manuellement toutes les modifications, une op\xe9ration qui produit beaucoup de peine et de souffrance."),(0,i.kt)("p",null,"La mise en place d'une premi\xe8re \xe9tape de compilation dans un processus d'int\xe9gration continue permet justement de ne plus se soucier si des modifications de code cassent la compilation. Le d\xe9veloppeur doit alors s'assurer de bien envoyer son code source sur le d\xe9p\xf4t central. En faisant cela, il d\xe9clenche une premi\xe8re \xe9tape de compilation, avec toutes les modifications des autres d\xe9veloppeurs. Si la compilation ne se fait pas, le code est alors rejet\xe9, et le d\xe9veloppeur doit corriger ses erreurs."),(0,i.kt)("p",null,"Apr\xe8s cette premi\xe8re \xe9tape, le code devient plus s\xfbr, et le d\xe9p\xf4t de code source garantit qu'\xe0 chaque instant, un d\xe9veloppeur r\xe9cup\xe8re un code qui compile. Dans cette \xe9tape, les tests ne sont pas encore ex\xe9cut\xe9s. Le code peut donc \xeatre de mauvaise qualit\xe9."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Vous pourrez compiler votre code avec ",(0,i.kt)("strong",{parentName:"p"},"Maven"),", ",(0,i.kt)("strong",{parentName:"p"},"Ant"),", ",(0,i.kt)("strong",{parentName:"p"},"Gradle"),", ",(0,i.kt)("strong",{parentName:"p"},"MSBuild"),", ",(0,i.kt)("strong",{parentName:"p"},"NAnt"),", ",(0,i.kt)("strong",{parentName:"p"},"Gulp")," ou encore ",(0,i.kt)("strong",{parentName:"p"},"Grunt"),".")),(0,i.kt)("h3",{id:"\xe9tape-3--testez-votre-code"},"\xc9tape 3 : Testez votre code"),(0,i.kt)("h4",{id:"les-tests-unitaires"},"Les tests unitaires"),(0,i.kt)("p",null,"Dans cette \xe9tape, ",(0,i.kt)("strong",{parentName:"p"},"l'orchestrateur se charge de lancer les tests unitaires \xe0 la suite de la compilation"),". Ces tests unitaires, g\xe9n\xe9ralement avec un framework associ\xe9, garantissent que le code respecte un certain niveau de qualit\xe9."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Les tests unitaires permettent de v\xe9rifier le bon fonctionnement d'une partie pr\xe9cise d'un logiciel ou d'une portion d'un programme.")),(0,i.kt)("p",null,"Plus il y a de tests unitaires, plus le code est garanti s\xfbr. \xc9videmment, l'orchestrateur ne peut lancer que les tests qui ont \xe9t\xe9 cod\xe9s par les d\xe9veloppeurs, et ne peut pas inventer de nouveaux cas de tests."),(0,i.kt)("p",null,"Ces tests doivent s'ex\xe9cuter ",(0,i.kt)("strong",{parentName:"p"},"de la mani\xe8re la plus rapide possible"),", afin d'avoir un feedback le plus rapide lui aussi. Pour arriver \xe0 ce niveau, ",(0,i.kt)("strong",{parentName:"p"},"il est n\xe9cessaire que les tests unitaires n'aient aucune d\xe9pendance")," vis-\xe0-vis de syst\xe8mes externes, comme par exemple une base de donn\xe9es, ou m\xeame le syst\xe8me de fichiers de la machine."),(0,i.kt)("p",null,"Les tests unitaires apportent 3 atouts \xe0 la production :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"trouver les erreurs plus facilement"),". Les tests sont ex\xe9cut\xe9s durant tout le d\xe9veloppement, permettant de visualiser si le code fra\xeechement \xe9crit correspond au besoin ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"s\xe9curiser la maintenance"),". Lors d'une modification d'un programme, les tests unitaires signalent les \xe9ventuelles r\xe9gressions. En effet, certains tests peuvent \xe9chouer \xe0 la suite d'une modification, il faut donc soit r\xe9\xe9crire le test pour le faire correspondre aux nouvelles attentes, soit corriger l'erreur se situant dans le code ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"documenter le code"),". Les tests unitaires peuvent servir de compl\xe9ment \xe0 la documentation ; il est tr\xe8s utile de lire les tests pour comprendre comment s'utilise une m\xe9thode. De plus, il est possible que la documentation ne soit plus \xe0 jour, mais les tests, eux, correspondent \xe0 la r\xe9alit\xe9 de l'application.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"L'ensemble des tests unitaires doivent \xeatre relanc\xe9s apr\xe8s une modification")," du code, afin de v\xe9rifier qu'il n'y ait pas de r\xe9gressions (l'apparition de nouveaux dysfonctionnements). "),(0,i.kt)("p",null,"La multiplicit\xe9 des test unitaires oblige \xe0 les ",(0,i.kt)("strong",{parentName:"p"},"maintenir")," dans le temps, au fur et \xe0 mesure que le d\xe9veloppement avance."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour impl\xe9menter et ex\xe9cuter vos tests unitaires, vous retrouverez des outils comme ",(0,i.kt)("strong",{parentName:"p"},"JUnit"),", ",(0,i.kt)("strong",{parentName:"p"},"NUnit")," ou encore ",(0,i.kt)("strong",{parentName:"p"},"XUnit"),".")),(0,i.kt)("h3",{id:"\xe9tape-4--mesurez-la-qualit\xe9-de-votre-code"},"\xc9tape 4 : Mesurez la qualit\xe9 de votre code"),(0,i.kt)("p",null,"Maintenant que les tests unitaires sont \xe9crits et ex\xe9cut\xe9s, nous commen\xe7ons \xe0 avoir une meilleure qualit\xe9 de code, et \xe0 \xeatre rassur\xe9s sur la fiabilit\xe9 et la robustesse de l'application. Gr\xe2ce \xe0 la compilation et aux tests unitaires, nous pouvons maintenant ",(0,i.kt)("strong",{parentName:"p"},"mesurer la qualit\xe9 du code"),". Tout ceci permet aux d\xe9veloppeurs de ",(0,i.kt)("strong",{parentName:"p"},"maintenir")," dans le temps un code de tr\xe8s bonne qualit\xe9, alertant l'\xe9quipe en cas de d\xe9rive des bonnes pratiques de tests."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"L'\xe9tape de qualit\xe9 de code est diff\xe9rente de l'\xe9tape de test, car cette \xe9tape de ",(0,i.kt)("strong",{parentName:"p"},"qualit\xe9")," assure que le code sera ",(0,i.kt)("strong",{parentName:"p"},"maintenable")," et ",(0,i.kt)("strong",{parentName:"p"},"\xe9volutif")," au fur et \xe0 mesure de son cycle de vie, alors que les ",(0,i.kt)("strong",{parentName:"p"},"tests")," servent \xe0 garantir que le code ",(0,i.kt)("strong",{parentName:"p"},"impl\xe9mente bien les fonctionnalit\xe9s")," demand\xe9es, et ne contient pas (ou peu) de ",(0,i.kt)("strong",{parentName:"p"},"bugs"),".")),(0,i.kt)("p",null,"Lors de l'\xe9tape de qualit\xe9 de code, nous cherchons \xe0 assurer la plus petite ",(0,i.kt)("strong",{parentName:"p"},"dette technique")," possible de notre application. La dette technique est le temps n\xe9cessaire \xe0 la correction de bugs ou \xe0 l'ajout de nouvelles fonctionnalit\xe9s, lorsque nous ne respectons pas les r\xe8gles de coding. La dette est exprim\xe9e en ",(0,i.kt)("strong",{parentName:"p"},"heures de correction"),". Plus cette dette est \xe9lev\xe9e, plus le code sera difficile \xe0 maintenir et \xe0 faire \xe9voluer."),(0,i.kt)("p",null,"L'\xe9tape de qualit\xe9 de code mesure aussi d'autres m\xe9triques, comme le nombre de vuln\xe9rabilit\xe9s au sein du code, la couverture de test, mais aussi les ",(0,i.kt)("a",{parentName:"p",href:"https://fr.wikipedia.org/wiki/Code_smell"},(0,i.kt)("em",{parentName:"a"},"code smells"))," (qui sont des mauvaises pratiques \xe0 ne pas impl\xe9menter), la ",(0,i.kt)("a",{parentName:"p",href:"https://fr.wikipedia.org/wiki/Nombre_cyclomatique"},"complexit\xe9 cyclomatique")," (complexit\xe9 du code applicatif) ou la duplication de code. C'est le r\xf4le du d\xe9veloppeur de respecter les normes d\xe9finies et de corriger au fur et \xe0 mesure son code."),(0,i.kt)("p",null,"Afin de renforcer la qualit\xe9 du code et de ne pas autoriser le d\xe9ploiement d'un code de mauvaise qualit\xe9, nous pouvons impl\xe9menter un ",(0,i.kt)("strong",{parentName:"p"},"arr\xeat complet du pipeline d'int\xe9gration continue, si le code n'atteint pas la qualit\xe9 requise"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Les outils")," : la qualit\xe9 du code peut \xeatre \xe9valu\xe9e gr\xe2ce \xe0 ",(0,i.kt)("strong",{parentName:"p"},"SonarQube"),", ",(0,i.kt)("strong",{parentName:"p"},"Cast")," ou ",(0,i.kt)("strong",{parentName:"p"},"GitLab Code Quality"),".")),(0,i.kt)("h3",{id:"\xe9tape-5--g\xe9rez-les-livrables-de-votre-application"},"\xc9tape 5 : G\xe9rez les livrables de votre application"),(0,i.kt)("p",null,"Le code, une fois compil\xe9, doit \xeatre d\xe9ploy\xe9 dans un d\xe9p\xf4t de livrables, et versionn\xe9. Les binaires produits sont appel\xe9s ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"artefacts")),". Ces artefacts doivent \xeatre accessibles \xe0 toutes les parties prenantes de l'application, afin de pouvoir les d\xe9ployer et lancer les tests autres qu'unitaires (test de performance, test de bout en bout, etc.). Ces artefacts sont disponibles dans un stockage, centralis\xe9 et organis\xe9, de donn\xe9es. Ce peut \xeatre une ou plusieurs bases de donn\xe9es o\xf9 les artefacts sont localis\xe9s en vue de leur distribution sur le r\xe9seau, ou bien un endroit directement accessible aux utilisateurs."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"La mise \xe0 disposition des artefacts peut \xeatre faite par ",(0,i.kt)("strong",{parentName:"p"},"Nexus"),", ",(0,i.kt)("strong",{parentName:"p"},"Artifactory"),", ",(0,i.kt)("strong",{parentName:"p"},"GitLab repository"),", ",(0,i.kt)("strong",{parentName:"p"},"Quay"),", ",(0,i.kt)("strong",{parentName:"p"},"Docker Hub"),".")),(0,i.kt)("h3",{id:"utilisez-gitlab-pour-mettre-en-place-un-pipeline-cicd"},"Utilisez GitLab pour mettre en place un pipeline CI/CD"),(0,i.kt)("p",null,"Dans la suite de ce cours, nous ferons le choix de GitLab. Cet outil a l'avantage d'avoir toutes les briques n\xe9cessaires \xe0 la mise en place de l'int\xe9gration continue, sans rentrer dans des \xe9tapes complexes de mise en place des outils, ainsi que les connexions associ\xe9es."),(0,i.kt)("p",null,"Afin de pouvoir illustrer l'int\xe9gration continue, nous allons travailler sur un projet open source : la mise en place du site web d'une clinique v\xe9t\xe9rinaire via Spring Boot. Toutes les \xe9tapes de mise en place de l'int\xe9gration continue seront enti\xe8rement d\xe9taill\xe9es dans la suite de cette partie."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Vous n'avez pas besoin de conna\xeetre Spring Boot, ni d'\xeatre cal\xe9 en d\xe9veloppement Java. Tout le code vous sera fourni, vous lui ferez passer toutes les \xe9tapes du pipeline CI/CD.")),(0,i.kt)("h2",{id:"planifiez-votre-d\xe9veloppement"},"Planifiez votre d\xe9veloppement"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"La m\xe9thodologie DevOps emprunte de nombreux concepts \xe0 ",(0,i.kt)("strong",{parentName:"p"},"Scrum"),". Afin de bien suivre la suite de ce chapitre, il vous sera donc n\xe9cessaire d'avoir des connaissances du vocabulaire et de la m\xe9thodologie Scrum. Il vous faudra notamment conna\xeetre les termes ",(0,i.kt)("em",{parentName:"p"},"epic"),", ",(0,i.kt)("em",{parentName:"p"},"user story"),", ",(0,i.kt)("em",{parentName:"p"},"task"),", ",(0,i.kt)("em",{parentName:"p"},"bug"),", ",(0,i.kt)("em",{parentName:"p"},"sprint"),", ",(0,i.kt)("em",{parentName:"p"},"Product Backlog"),", ",(0,i.kt)("em",{parentName:"p"},"board"),",",(0,i.kt)("em",{parentName:"p"},"burndown chart"),", ",(0,i.kt)("em",{parentName:"p"},"Definition of Done"),", ",(0,i.kt)("em",{parentName:"p"},"Definition of Ready"),", tels que d\xe9finis par la m\xe9thodologie Scrum.")),(0,i.kt)("p",null,"Dans GitLab, l'",(0,i.kt)("strong",{parentName:"p"},"issue")," est la notion centrale pour d\xe9finir n'importe quoi : que ce soit une epic, une feature ou m\xeame un bug. La distinction se fait via des labels, que l'on positionne sur l'issue."),(0,i.kt)("p",null,"Il est temps de d\xe9finir notre premier ",(0,i.kt)("strong",{parentName:"p"},"backlog"),", c'est-\xe0-dire l'ensemble des t\xe2ches \xe0 r\xe9aliser sur notre projet."),(0,i.kt)("h3",{id:"cr\xe9ez-votre-projet-gitlab"},"Cr\xe9ez votre projet GitLab"),(0,i.kt)("p",null,"Dans un premier temps, nous allons ",(0,i.kt)("strong",{parentName:"p"},"cr\xe9er un projet dans GitLab"),". Pour cela, nous allons utiliser la plateforme ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.com/"},"https://gitlab.com/"),", afin d'\xe9viter d'installer notre propre plateforme GitLab en local."),(0,i.kt)("p",null,"Si vous n'avez pas encore de compte sur GitLab, je vous invite \xe0 vous en cr\xe9er un, puis \xe0 vous connecter."),(0,i.kt)("p",null,"Une fois connect\xe9, vous arrivez sur une page listant tous vos projets. Si vous venez de cr\xe9er le compte, normalement cette page sera vide."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Comme expliqu\xe9 dans le premier chapitre, nous allons nous baser sur le projet ",(0,i.kt)("strong",{parentName:"p"},"PetClinic")," tout au long du cours. Dans ce chapitre, nous allons commencer \xe0 planifier le d\xe9veloppement de fonctionnalit\xe9s pour ce projet.")),(0,i.kt)("p",null,"Pour ",(0,i.kt)("strong",{parentName:"p"},"cr\xe9er un nouveau projet dans GitLab"),", une fois connect\xe9, cliquez sur le bouton ",(0,i.kt)("inlineCode",{parentName:"p"},"New Project"),". Sur la nouvelle page, il faut entrer un nouveau nom de projet. Dans le champ Project Name, nous allons entrer le nom ",(0,i.kt)("strong",{parentName:"p"},"spring-petclinic-microservices"),". Notez au passage que GitLab remplit automatiquement le champ Project Slug. Il est imp\xe9ratif de passer le projet en ",(0,i.kt)("strong",{parentName:"p"},"Public")," afin de b\xe9n\xe9ficier de toutes les fonctionnalit\xe9s abord\xe9es dans ce cours. Une fois tous les champs remplis, l'\xe9cran devrait ressembler \xe0 cela :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586242595092_new-project-detail.png",alt:"Cr\xe9ation d'un projet sur Gitlab"})),(0,i.kt)("p",null,"Appuyez maintenant sur le bouton ",(0,i.kt)("em",{parentName:"p"},"Create Project"),". Vous arrivez alors sur la page du projet fra\xeechement cr\xe9\xe9. Avant de r\xe9cup\xe9rer le code source de l'application, et de l'int\xe9grer dans GitLab, nous allons mettre en place les diff\xe9rentes briques n\xe9cessaires au bon d\xe9roulement du projet. Tout d'abord, nous allons naviguer dans la partie Issues, afin d'ajouter les colonnes n\xe9cessaires \xe0 notre projet. Pour ce faire, il suffit d'aller sur le menu \xe0 gauche, survoler le menu Issues, et cliquer sur le lien Boards. Sur cette page, GitLab nous propose d'ajouter les listes par d\xe9faut via le bouton Add default lists. GitLab cr\xe9e alors deux nouvelles colonnes, To Do et Doing :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586243172078_boards-new.png",alt:"Votre board sur GitLab"})),(0,i.kt)("p",null,"Ce ",(0,i.kt)("strong",{parentName:"p"},"board")," sera notre board par d\xe9faut durant tout notre projet, afin de voir son avancement. Nous allons ensuite ",(0,i.kt)("strong",{parentName:"p"},"cr\xe9er les diff\xe9rents labels")," que nous avons vus pr\xe9c\xe9demment, afin de pouvoir cr\xe9er et cat\xe9goriser les issues que nous allons ouvrir. Pour ce faire, nous allons aller dans le sous-menu Labels du menu Issues. Sur la nouvelle page, il faut alors cliquer sur le bouton ",(0,i.kt)("strong",{parentName:"p"},"New Label")," pour cr\xe9er une nouvelle cat\xe9gorie d'issue. Notez que GitLab a d\xe9j\xe0 cr\xe9\xe9 les deux labels To Do et Doing pour nous."),(0,i.kt)("p",null,"Sur la page de cr\xe9ation de nouveaux labels, nous allons ajouter tous les labels n\xe9cessaires \xe0 la cat\xe9gorisation des issues :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586244055298_label-new.png",alt:"Cr\xe9ation d'un nouveau label"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Les cat\xe9gories \xe0 cr\xe9er sont")," : Epic, User Story, Bug, Ready, Rejected, High, Medium, Low, In Review. Une fois les labels cr\xe9\xe9s, la liste devrait ressembler \xe0 ceci :")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586244563257_labels-list.png",alt:"Tous vos labels sont pr\xeats !"})),(0,i.kt)("p",null,"Vous noterez la cr\xe9ation de plusieurs labels que je n'ai pas d\xe9taill\xe9s : High, Medium, Low, Ready, Rejected et In Review. Ces labels sont utilis\xe9s pour cat\xe9goriser plusieurs issues et pour cr\xe9er un nouveau board, que nous allons appeler ",(0,i.kt)("strong",{parentName:"p"},"Product Backlog"),". Pour ce faire, il faut retourner dans le menu Board. Tout d'abord, dans la page courante, cliquez sur Add List et s\xe9lectionnez le label In Review pour ajouter une nouvelle colonne dans le board courant. Le nouveau board doit ressembler \xe0 cela (pour des questions de lisibilit\xe9, j'ai repli\xe9 les colonnes Open et Closed dans la capture d'\xe9cran suivante) :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586245146433_development-board.png",alt:"Nouvelle colonne sur votre board de d\xe9veloppement"})),(0,i.kt)("p",null,"Ensuite, sur la page, en haut \xe0 gauche, il y a une liste d\xe9roulante contenant tous les boards cr\xe9\xe9s. Pour l'instant, il n'y en a qu'un seul, celui de d\xe9veloppement qui est actuellement affich\xe9."),(0,i.kt)("p",null,"Dans cette liste d\xe9roulante, s\xe9lectionnez ",(0,i.kt)("strong",{parentName:"p"},"Create New Board"),", puis donnez-lui le nom de ",(0,i.kt)("strong",{parentName:"p"},"Product"),". Ce board sera notre ",(0,i.kt)("strong",{parentName:"p"},"Product Backlog")," qui listera toutes les epics, ainsi que les user stories associ\xe9es et leurs \xe9tats respectifs :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/1558624642716_new-board.png",alt:"Cr\xe9ez votre Product Backlog"})),(0,i.kt)("p",null,"Sur la nouvelle page, apr\xe8s avoir cliqu\xe9 sur le bouton Create Board, il faut maintenant ajouter les colonnes Low, Medium, High et Rejected afin de pouvoir classifier les epics sur ce board. Pour ce faire, il faut cliquer sur la liste d\xe9roulante Add List, et ajouter les labels correspondants."),(0,i.kt)("p",null,"Votre board devrait ressembler maintenant \xe0 cela :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586246843437_product-board-detail.png",alt:"Votre Product Backlog"})),(0,i.kt)("p",null,"Nous avons maintenant tous les outils n\xe9cessaires afin de commencer notre travail sur le projet. Le workflow de d\xe9veloppement se d\xe9roule comme suit :"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Le product owner travaille avec les utilisateurs finaux afin de d\xe9finir un ",(0,i.kt)("strong",{parentName:"li"},"Product Backlog"),". Ce Product Backlog est constitu\xe9 de diff\xe9rentes ",(0,i.kt)("strong",{parentName:"li"},"epics"),"."),(0,i.kt)("li",{parentName:"ol"},"Ces ",(0,i.kt)("strong",{parentName:"li"},"epics")," doivent faire appara\xeetre plusieurs crit\xe8res, comme par exemple des wireframes ou autres \xe9crans d\xe9finissant l'application. Une epic en high passe en sprint backlog lorsque son p\xe9rim\xe8tre est d\xe9limit\xe9 avec un label ",(0,i.kt)("strong",{parentName:"li"},"Ready"),", et le d\xe9veloppement est confirm\xe9 avec le client. Ce n\u2019est qu\u2019\xe0 ce moment que l\u2019epic est discut\xe9e avec l\u2019\xe9quipe et d\xe9compos\xe9e en user stories, d\xe9crivant la feature \xe0 d\xe9velopper."),(0,i.kt)("li",{parentName:"ol"},"Les ",(0,i.kt)("strong",{parentName:"li"},"user stories")," doivent respecter la Definition of Ready d\xe9finie plus t\xf4t, lors du cycle de d\xe9veloppement. Une user story n'est ready que si elle a bien \xe9t\xe9 \xe9crite, et contient tous les \xe9l\xe9ments n\xe9cessaires \xe0 son d\xe9veloppement durant le sprint."),(0,i.kt)("li",{parentName:"ol"},"Une fois que le sprint backlog a \xe9t\xe9 d\xe9compos\xe9 en user stories, nous pouvons alors commencer la planification du sprint backlog.")),(0,i.kt)("p",null,"Pour ce cours, nous allons cr\xe9er ",(0,i.kt)("strong",{parentName:"p"},"deux issues")," :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"une epic")," ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"une user story"),".")),(0,i.kt)("h3",{id:"cr\xe9ez-votre-premi\xe8re-epic"},"Cr\xe9ez votre premi\xe8re epic"),(0,i.kt)("p",null,"Pour cr\xe9er une ",(0,i.kt)("strong",{parentName:"p"},"epic"),", le plus simple est d'aller dans le sous-menu List du menu Issues, et de cliquer sur le bouton ",(0,i.kt)("strong",{parentName:"p"},"New Issue"),"."),(0,i.kt)("p",null,"Sur la nouvelle page, il faut alors renseigner les champs n\xe9cessaires. Commen\xe7ons par renseigner le titre, ainsi que la description de l'issue :"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Titre de l'issue :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[EPIC] Gestion des v\xe9t\xe9rinaires\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Description de l'issue :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Dans le projet *PetClinic*, il faut ajouter la gestion des v\xe9t\xe9rinaires.\nImpl\xe9mentation de :\n- Cr\xe9ation des v\xe9t\xe9rinaires\n- Recherche des v\xe9t\xe9rinaires\n- Mise \xe0 jour des v\xe9t\xe9rinaires\n- Suppression des v\xe9t\xe9rinaires\n\nT\xe2ches \xe0 faire :\n- [x] Cr\xe9ation des v\xe9t\xe9rinaires\n- [x] Recherche des v\xe9t\xe9rinaires\n- [x] Mise \xe0 jour des v\xe9t\xe9rinaires\n- [ ] Suppression des v\xe9t\xe9rinaires\n- [ ] Supprimer les v\xe9t\xe9rinaires\n- [x] Suppression de la base de donn\xe9es\n")),(0,i.kt)("p",null,"Ajoutez-lui le label Epic :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586247348176_new-epic.png",alt:"Cr\xe9ez votre premi\xe8re epic"})),(0,i.kt)("p",null,"Et enregistrez en cliquant sur le bouton Submit Issue."),(0,i.kt)("h3",{id:"cr\xe9ez-votre-premi\xe8re-user-story"},"Cr\xe9ez votre premi\xe8re user story"),(0,i.kt)("p",null,"La deuxi\xe8me issue sera de type user story. Ajoutez une nouvelle issue en cliquant sur le bouton New Issue :"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Titre de l'issue :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[User story] Suppression du v\xe9t\xe9rinaire\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Description de l'issue :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"En tant qu'administrateur, je dois pouvoir supprimer un v\xe9t\xe9rinaire afin que celui-ci ne s'affiche plus dans l'application\n")),(0,i.kt)("p",null,"Et enregistrez-la."),(0,i.kt)("p",null,"Si vous revenez sur la liste des issues, vous avez maintenant deux issues cr\xe9\xe9es :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586248070332_list-issues.png",alt:"Vos 2 issues cr\xe9\xe9es"})),(0,i.kt)("h3",{id:"organisez-votre-backlog"},"Organisez votre backlog"),(0,i.kt)("p",null,"Nous allons maintenant ",(0,i.kt)("strong",{parentName:"p"},"associer la user story")," fra\xeechement cr\xe9\xe9e \xe0 l'epic que l'on a cr\xe9\xe9e auparavant. Pour ce faire, il suffit d'aller sur la description de l'epic, de cliquer sur le bouton +, au niveau du menu Related Issues, d'ajouter le num\xe9ro de la user story (dans mon cas, #5), et de cliquer sur Add."),(0,i.kt)("p",null,"Si nous retournons maintenant sur le menu Boards, nous allons voir que sur les deux boards cr\xe9\xe9s (Development et Product), dans la partie Open, nous avons nos deux issues cr\xe9\xe9es pr\xe9c\xe9demment :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586248607207_board-not-filtered.png",alt:"Votre user story associ\xe9e \xe0 votre epic"})),(0,i.kt)("p",null,"Cependant, nous ne voulons voir ici que les issues associ\xe9es \xe0 chacun des boards (user stories pour le board Development, et epic pour le board Product). Pour ce faire, il suffit de cliquer sur le bouton Edit Board, et d'ajouter uniquement les labels qui nous int\xe9ressent :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586249458233_edit-board-development.png",alt:"Configurez vos boards"})),(0,i.kt)("p",null,"En modifiant les boards, nous nous retrouvons bien avec les issues qui nous int\xe9ressent sur chacun des boards."),(0,i.kt)("p",null,"En d\xe9pla\xe7ant nos issues sur chacun des boards, nous pouvons jouer sur la priorisation des epics, ou l'avancement des user stories."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586250482371_priorizing-product.png",alt:"Priorisez vos epics"})),(0,i.kt)("p",null,"La derni\xe8re chose \xe0 faire est de cr\xe9er un sprint, et de voir le burndown chart associ\xe9. Pour ce faire, il faut aller dans le menu Milestones, et cliquer sur le bouton New Milestone."),(0,i.kt)("p",null,"Ensuite, il suffit de remplir les informations du sprint, et de cliquer sur le bouton Create Milestone :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586251686628_new-milestone-detail.png",alt:"Cr\xe9ez une milestone"})),(0,i.kt)("p",null,"Nous avons maintenant acc\xe8s au burndown chart du sprint en cours :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586252007218_burndown-chart.png",alt:"Votre burndown chart"})),(0,i.kt)("p",null,"Afin ",(0,i.kt)("strong",{parentName:"p"},"d'associer des issues au sprint en cours"),", il suffit d'aller sur chacune des issues que l'on souhaite associer au sprint, et de modifier leur propri\xe9t\xe9 sur le menu \xe0 droite. Dans cet exemple, j'ai modifi\xe9 le milestone, le time tracking (en commentant l'issue avec les commandes /estimate et /spend), la due date, le weight, et je me suis assign\xe9 l'issue :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586252464075_edit-issue.png",alt:"Timeline d'\xe9volution des boards"})),(0,i.kt)("p",null,"Dor\xe9navant, toute l'\xe9quipe pourra suivre l'avancement du burndown chart facilement :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586252982251_burndown-chart-complete.png",alt:"Burndown chart accessible \xe0 toute l'\xe9quipe !"})),(0,i.kt)("h2",{id:"int\xe9grez-votre-code-en-continu"},"Int\xe9grez votre code en continu"),(0,i.kt)("h3",{id:"clonez-le-projet-sur-votre-poste"},"Clonez le projet sur votre poste"),(0,i.kt)("p",null,"Pour pouvoir commencer \xe0 travailler sur le projet, afin de r\xe9cup\xe9rer le code source, nous allons dans un premier temps ",(0,i.kt)("strong",{parentName:"p"},"cloner le repository Git"),". Pour ce faire, retournez sur la ",(0,i.kt)("strong",{parentName:"p"},"page d'accueil du projet")," o\xf9 se trouvent toutes les instructions n\xe9cessaires au clonage du projet."),(0,i.kt)("p",null,"Cliquez en haut \xe0 droite sur le bouton bleu ",(0,i.kt)("strong",{parentName:"p"},"Clone"),", et copiez la deuxi\xe8me ligne de la pop-up ",(0,i.kt)("strong",{parentName:"p"},"Clone with HTTPS"),"."),(0,i.kt)("p",null,"Prenez ensuite une console d'ordinateur, repr\xe9sentant votre poste de d\xe9veloppeur, et clonez le repository en tapant la commande suivante :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://gitlab.com/[votre-nom-d-utilisateur]/spring-petclinic-microservices.git\ncd spring-petclinic-microservices\n")),(0,i.kt)("p",null,"Une fois le clone fait, nous nous retrouvons avec un dossier vide o\xf9 la branche ",(0,i.kt)("inlineCode",{parentName:"p"},"master")," est associ\xe9e \xe0 notre repository GitLab. Nous allons ",(0,i.kt)("strong",{parentName:"p"},"ajouter une branche")," ",(0,i.kt)("inlineCode",{parentName:"p"},"upstream")," sur GitHub et puller les derni\xe8res modifications GitHub. Les commandes \xe0 taper sont les suivantes :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git remote add upstream https://github.com/spring-petclinic/spring-petclinic-microservices.git\ngit pull upstream master\ngit push origin master\n")),(0,i.kt)("p",null,"Normalement, si les commandes pr\xe9c\xe9dentes ont \xe9t\xe9 ex\xe9cut\xe9es, le dossier Git devrait contenir le code source du projet PetClinic, ainsi que toutes les modifications associ\xe9es."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589768409364_gitlab.png",alt:"Votre projet GitLab une fois le code clon\xe9"})),(0,i.kt)("h3",{id:"activez-lint\xe9gration-continue-sur-votre-projet-avec-gitlab"},"Activez l'int\xe9gration continue sur votre projet avec GitLab"),(0,i.kt)("p",null,"Nous allons maintenant ajouter un ",(0,i.kt)("strong",{parentName:"p"},"pipeline d'int\xe9gration continue"),", afin d'impl\xe9menter les diff\xe9rentes \xe9tapes que nous avons vues pr\xe9c\xe9demment. Les \xe9tapes de ce pipeline seront lanc\xe9es successivement, lors de chaque nouveau push du code sur le repo. Voici \xe0 quoi ressemblera le pipeline :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/29/15591251962731_1c3_illus_WHITEBG%20%280-00-17-23%29_0.png",alt:"Les \xe9tapes que nous allons mettre en place"})),(0,i.kt)("p",null,"Pour ",(0,i.kt)("strong",{parentName:"p"},"activer l'int\xe9gration continue sur GitLab"),", le plus simple est de cliquer sur le bouton Set up CI/CD sur la page d'accueil du projet. Cette commande va cr\xe9er le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab-ci.yml")," dans votre projet. C'est sur ce fichier que vous d\xe9crirez tout votre pipeline CI/CD avec la syntaxe YAML."),(0,i.kt)("p",null,"Et d'ajouter les lignes suivantes dans le fichier :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'stages:\n  - build\n  - test\n\ncache:\n  paths:\n    - .m2/repository\n  key: "$CI_JOB_NAME"\n\nbuild_job:\n  stage: build\n  script:\n    - ./mvnw compile\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n\ntest_job:\n  stage: test\n  script:\n    - ./mvnw test\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n')),(0,i.kt)("p",null,"Ce fichier est la pierre angulaire de l'impl\xe9mentation d'un pipeline dans GitLab. Ce fichier s'appelle ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml"),", et c'est ici que nous allons d\xe9finir notre pipeline. Dans cet exemple, nous avons impl\xe9ment\xe9 ",(0,i.kt)("strong",{parentName:"p"},"deux \xe9tapes")," :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"l'\xe9tape de compilation avec la t\xe2che ",(0,i.kt)("inlineCode",{parentName:"li"},"build_job")," ;"),(0,i.kt)("li",{parentName:"ul"},"l'\xe9tape des tests avec la t\xe2che ",(0,i.kt)("inlineCode",{parentName:"li"},"test_job"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"D\xe9couvrons le fichier bloc par bloc !")),(0,i.kt)("h4",{id:"d\xe9finissez-les-\xe9tapes-du-pipeline"},"D\xe9finissez les \xe9tapes du pipeline"),(0,i.kt)("p",null,"Dans un premier temps, je d\xe9finis les ",(0,i.kt)("strong",{parentName:"p"},"\xe9tapes")," de mon pipeline avec le mot cl\xe9 ",(0,i.kt)("inlineCode",{parentName:"p"},"stages"),". Ce mot cl\xe9 permet de d\xe9finir l'ordre des \xe9tapes. Ici, la premi\xe8re \xe9tape va \xeatre le ",(0,i.kt)("inlineCode",{parentName:"p"},"build"),", et ensuite les ",(0,i.kt)("inlineCode",{parentName:"p"},"tests"),". "),(0,i.kt)("p",null,"\xc7a veut dire que les ",(0,i.kt)("strong",{parentName:"p"},"t\xe2ches")," (ou ",(0,i.kt)("em",{parentName:"p"},"jobs")," en anglais) associ\xe9es \xe0 ",(0,i.kt)("strong",{parentName:"p"},"l'\xe9tape")," ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," (ici ",(0,i.kt)("inlineCode",{parentName:"p"},"build_job"),") vont s'ex\xe9cuter en premier, puis les t\xe2ches de l'\xe9tape ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," (ici ",(0,i.kt)("inlineCode",{parentName:"p"},"test_job"),")."),(0,i.kt)("h4",{id:"acc\xe9l\xe9rez-les-\xe9tapes-avec-le-cache"},"Acc\xe9l\xe9rez les \xe9tapes avec le cache"),(0,i.kt)("p",null,"Le deuxi\xe8me bloc, avec le mot cl\xe9 ",(0,i.kt)("inlineCode",{parentName:"p"},"cache"),", est ici utilis\xe9 pour acc\xe9l\xe9rer toutes nos \xe9tapes. Effectivement, dans le cas d'une compilation Java avec Maven (notre cas), cette compilation r\xe9cup\xe8re beaucoup de d\xe9pendances et de librairies externes. Ces librairies sont stock\xe9es dans le r\xe9pertoire ",(0,i.kt)("inlineCode",{parentName:"p"},".m2"),"."),(0,i.kt)("p",null,"Gr\xe2ce \xe0 l'utilisation du mot cl\xe9 ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," et de la variable pr\xe9d\xe9finie de GitLab ",(0,i.kt)("inlineCode",{parentName:"p"},"$CI_JOB_NAME"),", ce r\xe9pertoire est commun \xe0 tous les jobs du pipeline."),(0,i.kt)("h4",{id:"d\xe9finissez-les-jobs-\xe0-effectuer"},"D\xe9finissez les jobs \xe0 effectuer"),(0,i.kt)("p",null,"Ensuite, je d\xe9clare deux jobs, correspondant chacun \xe0 une des \xe9tapes de notre pipeline d'int\xe9gration continue. Dans ces deux jobs, nous voyons que nous avons trois diff\xe9rentes lignes. D\xe9couvrons \xe0 quoi ces lignes correspondent :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stage")," : c'est le nom de l'\xe9tape qui va appara\xeetre dans notre pipeline d'int\xe9gration continue. Cela correspond aussi au ",(0,i.kt)("inlineCode",{parentName:"li"},"stage")," auquel sera ex\xe9cut\xe9 le job ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"script")," : ce sont les lignes de script \xe0 lancer afin d'ex\xe9cuter l'\xe9tape. Ici, nous lan\xe7ons le script Maven suivant son lifecycle. Dans la partie - ",(0,i.kt)("inlineCode",{parentName:"li"},"build"),", nous lan\xe7ons la compilation ; et dans la partie ",(0,i.kt)("inlineCode",{parentName:"li"},"test"),", nous lan\xe7ons les tests de l'application. D'autres options sont d\xe9finies afin d'acc\xe9l\xe9rer le temps de traitement de ces lignes. Le ",(0,i.kt)("inlineCode",{parentName:"li"},"script")," va alors t\xe9l\xe9charger Maven, l\u2019outil de compilation, toutes les d\xe9pendances de l\u2019application, et lancer la compilation du projet ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"image")," : c'est l'image Docker qui va \xeatre lanc\xe9e par GitLab afin d'ex\xe9cuter les lignes de script que nous avons d\xe9finies. Ici, l'image ",(0,i.kt)("inlineCode",{parentName:"li"},"openjdk:8-alpine"),", qui contient d\xe9j\xe0 Java 8, va \xeatre lanc\xe9e afin de pouvoir compiler le projet. Une fois le fichier sauvegard\xe9, le pipeline de build se lance, et vous devriez voir les diff\xe9rentes \xe9tapes se lancer (ici, l'\xe9tape de build et l'\xe9tape de test).")),(0,i.kt)("p",null,"Lors de l'\xe9tape de ",(0,i.kt)("inlineCode",{parentName:"p"},"test"),", le pipeline va ex\xe9cuter les tests unitaires d\xe9j\xe0 pr\xe9sents au sein du projet. L'objectif de cette \xe9tape est de s'assurer de lancer les tests \xe9crits par les d\xe9veloppeurs. ",(0,i.kt)("strong",{parentName:"p"},"Si un seul de ces tests \xe9choue, le pipeline s'arr\xeate"),"."),(0,i.kt)("h3",{id:"lancez-votre-pipeline-cicd"},"Lancez votre pipeline CI/CD"),(0,i.kt)("p",null,"Pour voir le pipeline complet, il suffit de cliquer sur le sous-menu Pipelines dans le menu CI/CD."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589772375269_pipeline.png",alt:"La page Pipeline avec toutes les ex\xe9cutions du pipeline"})),(0,i.kt)("p",null,"En cliquant sur le statut ",(0,i.kt)("em",{parentName:"p"},"running")," du pipeline, nous avons plus de d\xe9tails sur ce pipeline, les jobs associ\xe9s ainsi que leurs statuts."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589773076171_pipeline-detail.png",alt:"D\xe9tail d'ex\xe9cution du pipeline"})),(0,i.kt)("h3",{id:"et-si-lapplication-contient-un-bug-"},"Et si l'application contient un bug ?"),(0,i.kt)("h4",{id:"lancez-votre-pipeline-avec-un-bug"},"Lancez votre pipeline avec un bug"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Afin de d\xe9montrer un workflow typique de CI/CD, nous allons ",(0,i.kt)("strong",{parentName:"p"},"introduire un bug dans l'application"),". \ud83d\udc1b Ainsi, nous verrons comment le pipeline de CI/CD le d\xe9tecte, et le corrige. Dans un premier temps, nous allons r\xe9cup\xe9rer le fichier que nous venons de cr\xe9er :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git pull\n")),(0,i.kt)("p",null,"Le dossier courant devrait avoir le nouveau fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml"),". Nous allons \xe9diter un fichier afin d'introduire un bug. Dans un premier temps, cr\xe9ez une nouvelle branche qui va accueillir nos modifications :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git checkout -b refactor-customers\n")),(0,i.kt)("p",null,"Ensuite, ",(0,i.kt)("strong",{parentName:"p"},"\xe9ditez le fichier"),' Java "',(0,i.kt)("em",{parentName:"p"},"spring-petclinic-customers-service/src/main/java/org/springframework/samples/petclinic/customers/CustomersServiceApplication.java"),'" Supprimez par exemple le " ',(0,i.kt)("strong",{parentName:"p"},";"),' " situ\xe9 \xe0 la fin de la ligne ',(0,i.kt)("inlineCode",{parentName:"p"},"package org.springframework.samples.petclinic.customers")," et commitez les changements dans Git :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'git add spring-petclinic-customers-service/src/main/java/org/springframework/samples/petclinic/customers/CustomersServiceApplication.java\ngit commit -m "Refactorisation du code des clients"\ngit push origin refactor-customers\n')),(0,i.kt)("p",null,"Vous devriez maintenant avoir deux branches visibles sur la page d'accueil du projet."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Puisque vous avez introduit un bug, le pipeline de build est maintenant en \xe9chec :")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589774662327_build-failed.png",alt:"Pipeline en \xe9chec"})),(0,i.kt)("p",null,"En cliquant sur la croix rouge dans la colonne Stage, nous avons le d\xe9tail de l'erreur (ici, le bug que nous avons introduit) :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/155897750423_build-failed-detail.png",alt:"D\xe9tail de l'erreur d'ex\xe9cution du pipeline"})),(0,i.kt)("h4",{id:"g\xe9rez-le-fix-du-bug-sur-gitlab"},"G\xe9rez le fix du bug sur GitLab"),(0,i.kt)("p",null,"Pour enregistrer le bug, nous pouvons cr\xe9er un nouveau Bug directement en cliquant sur le bouton New Issue. Il faut alors remplir les champs ad\xe9quats comme l'assignee, le milestone, les labels (Bug et User Story) ou la due date :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589775778674_new-bug.png",alt:"Cr\xe9ation d'une nouvelle issue Bug dans GitLab"})),(0,i.kt)("p",null,"Une fois l'issue compl\xe9t\xe9e, nous avons tous les d\xe9tails du bug \xe0 corriger et le job en \xe9chec est automatiquement r\xe9cup\xe9r\xe9 :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589777460194_new-bug-created.png",alt:"Nouveau bug cr\xe9\xe9"})),(0,i.kt)("p",null,"Si nous revenons sur le board Development, nous nous apercevons que l'issue cr\xe9\xe9e appara\xeet dans la colonne Open. Nous pouvons alors la d\xe9placer dans la colonne Doing, car nous allons la corriger."),(0,i.kt)("p",null,"Pour corriger ce bug automatiquement, nous allons cr\xe9er une merge request, c'est-\xe0-dire demander \xe0 commiter les changements sur notre branche dans la branche principale ",(0,i.kt)("inlineCode",{parentName:"p"},"master"),". Pour ce faire, il faut aller dans le menu Merge Requests et cliquer sur New Merge Request."),(0,i.kt)("p",null,"Dans la nouvelle page, il faut choisir la branche que nous voulons merger dans la branche principale (ici, la branche ",(0,i.kt)("inlineCode",{parentName:"p"},"monbug"),') et cliquer sur "Compare branches and continue" :'),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589789051477_compare-branches.png",alt:"Comparaison des branches Master et Monbug"})),(0,i.kt)("p",null,'Au prochain \xe9cran, il faut remplir les champs de fa\xe7on ad\xe9quate, et cliquer sur Submit Merge Request. Pour le champ Description, la syntaxe est "Closes" et le num\xe9ro du bug, ici, le 6 :'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Title : ",(0,i.kt)("em",{parentName:"li"},"WIP: Mon premier bug")," ;"),(0,i.kt)("li",{parentName:"ul"},"Description : ",(0,i.kt)("em",{parentName:"li"},"Closes #6")," ;"),(0,i.kt)("li",{parentName:"ul"},"Assignee : ",(0,i.kt)("em",{parentName:"li"},"Assign to me")," ;"),(0,i.kt)("li",{parentName:"ul"},"Milestone : ",(0,i.kt)("em",{parentName:"li"},"Sprint 1"),".")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589790588121_submit-merge-request.png",alt:"Description de mon bug"})),(0,i.kt)("p",null,"Une fois la merge request cr\xe9\xe9e, nous avons tous les d\xe9tails de celle-ci :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589790991082_merge-request-detail.png",alt:"Description de mon bug"})),(0,i.kt)("h4",{id:"corrigez-votre-bug"},"Corrigez votre bug"),(0,i.kt)("p",null,'l est temps de corriger notre bug. Nous allons \xe9diter le fichier que nous avons modifi\xe9. Pour cela, nous allons r\xe9introduire le " ',(0,i.kt)("strong",{parentName:"p"},";"),' " manquant, puis commiter le code corrig\xe9 sur la branche ',(0,i.kt)("inlineCode",{parentName:"p"},"monbug"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'git add spring-petclinic-customers-service/src/main/java/org/springframework/samples/petclinic/customers/CustomersServiceApplication.java\ngit commit -m "Correction du bug clients"\ngit push origin monbug\n')),(0,i.kt)("p",null,"Vous allez constater qu'une fois le code push\xe9 sur la branche ",(0,i.kt)("inlineCode",{parentName:"p"},"monbug"),", le pipeline de build se lance afin de v\xe9rifier que le code que nous avons envoy\xe9 fonctionne."),(0,i.kt)("p",null,"Une fois que le pipeline s'est termin\xe9 en succ\xe8s, nous pouvons alors enlever le statut Work in progress en cliquant sur le bouton Resolve WIP status, pour ensuite cliquer sur le bouton Merge :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589794618626_merge-branches.png",alt:"Bug r\xe9solu, mergez les branches !"})),(0,i.kt)("p",null,"Le pipeline se lance alors une derni\xe8re fois pour v\xe9rifier que le code merg\xe9 ne casse pas la compilation."),(0,i.kt)("p",null,"Enfin, si nous revenons sur le board Development, nous voyons que le bug est automatiquement ferm\xe9, suite \xe0 notre merge request."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/29/15591253758662_1c3_illus_WHITEBG%20%280-00-17-23%29_2.png",alt:"Les 2 premi\xe8res \xe9tapes du pipeline sont fonctionnelles \u2705"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Nous avons donc rempli les 3 premi\xe8res \xe9tapes de l'int\xe9gration continue :"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"\u2705Planifiez votre d\xe9veloppement."),(0,i.kt)("li",{parentName:"ol"},"\u2705Compilez et int\xe9grez votre code."),(0,i.kt)("li",{parentName:"ol"},"\u2705Testez votre code."),(0,i.kt)("li",{parentName:"ol"},"Mesurez la qualit\xe9 de votre code."),(0,i.kt)("li",{parentName:"ol"},"G\xe9rez les livrables de votre application."))),(0,i.kt)("h2",{id:"garantissez-la-qualit\xe9-de-votre-code"},"Garantissez la qualit\xe9 de votre code"),(0,i.kt)("h3",{id:"mesurez-la-qualit\xe9-de-votre-code"},"Mesurez la qualit\xe9 de votre code"),(0,i.kt)("p",null,"Commen\xe7ons par ",(0,i.kt)("strong",{parentName:"p"},"l'analyse de code statique"),", afin de contr\xf4ler la ",(0,i.kt)("strong",{parentName:"p"},"qualit\xe9 du code"),"."),(0,i.kt)("p",null,"Nous allons donc modifier le pipeline de code, afin d'ajouter cette analyse de code. Il faut alors modifier le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," afin qu'il ressemble \xe0 ceci :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'stages:\n  - build\n  - test\n  - quality\n\ncache:\n  paths:\n    - .m2/repository\n  key: "$CI_JOB_NAME"\n\nbuild_job:\n  stage: build\n  script:\n    - ./mvnw compile\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n\ntest_job:\n  stage: test\n  script:\n    - ./mvnw test\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n\ncode_quality_job:\n  stage: quality\n  image: docker:stable\n  allow_failure: true\n  services:\n    - docker:stable-dind\n  script:\n    - mkdir codequality-results\n    - docker run\n        --env CODECLIMATE_CODE="$PWD"\n        --volume "$PWD":/code\n        --volume /var/run/docker.sock:/var/run/docker.sock\n        --volume /tmp/cc:/tmp/cc\n        codeclimate/codeclimate analyze -f html > ./codequality-results/index.html\n  artifacts:\n    paths:\n      - codequality-results/\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Ici, j'ai ajout\xe9 une \xe9tape suppl\xe9mentaire de qualit\xe9 de code. L'\xe9tape (",(0,i.kt)("em",{parentName:"p"},"le stage"),") ",(0,i.kt)("inlineCode",{parentName:"p"},"quality")," est d\xe9fini dans le bloc ",(0,i.kt)("inlineCode",{parentName:"p"},"stages"),". Cela veut dire que le pipeline va ajouter un job de qualit\xe9 \xe0 la suite de la compilation et des tests. Ce job, je l'ajoute \xe0 la fin du fichier et il est appel\xe9 ",(0,i.kt)("inlineCode",{parentName:"p"},"code_quality_job"),".")),(0,i.kt)("p",null,"Dans ce job, nous retrouvons les 3 lignes des \xe9tapes pr\xe9c\xe9dentes, plus d'autres lignes :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allow_failure")," : cette ligne ",(0,i.kt)("strong",{parentName:"li"},"autorise l'\xe9chec de l'\xe9tape de qualit\xe9"),". Comme ce n'est pas une \xe9tape critique, nous nous permettons d'autoriser l'\xe9chec et de laisser le pipeline continuer ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"services")," : ce nouveau mot cl\xe9 de GitLab permet de ",(0,i.kt)("strong",{parentName:"li"},"d\xe9marrer un d\xe9mon Docker"),", pour que l\u2019ex\xe9cution de notre programme d\u2019analyse de code puisse se faire. Cette ligne nous permet d'ex\xe9cuter Docker au sein de l'image, afin d'ex\xe9cuter l'analyse de code ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"script")," : cette ligne est un peu plus compliqu\xe9e que les lignes de script pr\xe9c\xe9dentes. La premi\xe8re ligne va cr\xe9er un dossier  ",(0,i.kt)("inlineCode",{parentName:"li"},"codequality-results/")," qui contiendra le r\xe9sultat de l'analyse de code. La deuxi\xe8me ligne monte le code \xe0 l'int\xe9rieur d'une image Docker via le dossier ",(0,i.kt)("inlineCode",{parentName:"li"},"/code"),", et lance l'analyse via le programme ",(0,i.kt)("inlineCode",{parentName:"li"},"codequality"),". Le r\xe9sultat sera export\xe9 dans le dossier ",(0,i.kt)("inlineCode",{parentName:"li"},"codequality-results")," ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"artifact")," : cette ligne est un pr\xe9requis de GitLab si nous voulons voir notre \xe9volution de qualit\xe9. Le dossier ",(0,i.kt)("inlineCode",{parentName:"li"},"codequality-results/")," sera stock\xe9 ",(0,i.kt)("strong",{parentName:"li"},"au sein de GitLab")," afin de pouvoir voir le r\xe9sultat de l'analyse du scan. Ce r\xe9sultat sera disponible et visible au sein du job ",(0,i.kt)("inlineCode",{parentName:"li"},"code_quality_job"),".")),(0,i.kt)("p",null,"Tout le script est ex\xe9cut\xe9 au sein de l'image ",(0,i.kt)("inlineCode",{parentName:"p"},"docker:stable"),". Cette image permet de d\xe9marrer le programme d\u2019analyse de code."),(0,i.kt)("p",null,"Une fois le fichier commit\xe9 sous Git et envoy\xe9 sur GitLab via les commandes suivantes, le pipeline d'int\xe9gration continue va alors se mettre \xe0 jour et lancer une compilation, suivie d'une analyse statique du code."),(0,i.kt)("p",null,"Le code est alors ",(0,i.kt)("strong",{parentName:"p"},"analys\xe9 par GitLab"),", et le rapport g\xe9n\xe9r\xe9 stock\xe9 au niveau des artefacts. Pour voir le r\xe9sultat de l'analyse de code, il suffit de naviguer dans le job ",(0,i.kt)("inlineCode",{parentName:"p"},"code_quality_job"),", puis de cliquer sur Browse. Vous aurez alors acc\xe8s au dossier contenant le r\xe9sultat de l'analyse de code, et pourrez naviguer au sein de ce fichier, afin de voir les am\xe9liorations \xe0 apporter au code."),(0,i.kt)("p",null,"\xc7a y est, l'\xe9tape de qualit\xe9 est impl\xe9ment\xe9e !"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/29/15591255853183_1c3_illus_WHITEBG%20%280-00-17-23%29_3.png",alt:"L'\xe9tape de qualit\xe9 est impl\xe9ment\xe9e \u2705"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"D'autres outils existent pour voir la qualit\xe9 d'un code de d\xe9veloppement. Le plus connu est ",(0,i.kt)("strong",{parentName:"p"},"SonarQube"),", qui permet d'afficher des rapports de qualit\xe9, l'\xe9volution de ceux-ci, ainsi qu'une d\xe9tection partielle des erreurs. ")),(0,i.kt)("h3",{id:"packagez-votre-application-pour-la-d\xe9ployer"},"Packagez votre application pour la d\xe9ployer"),(0,i.kt)("p",null,"La prochaine \xe9tape apr\xe8s la qualit\xe9 du code est le ",(0,i.kt)("strong",{parentName:"p"},"packaging")," de l'application, afin de pouvoir la d\xe9ployer plus facilement. Pour ce projet, nous allons choisir ",(0,i.kt)("strong",{parentName:"p"},"Docker")," comme programme de packaging."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Si vous n'\xeates pas \xe0 l'aise avec les conteneurs Docker, ils seront expliqu\xe9s plus en d\xe9tail ",(0,i.kt)("strong",{parentName:"p"},"dans la seconde partie de ce cours"),", quand nous verrons la livraison continue.")),(0,i.kt)("p",null,"GitLab vient avec une registry Docker incluse, ce qui nous permet de stocker ces images au sein de GitLab. Pour pouvoir packager nos images Docker, il est n\xe9cessaire d'ajouter une nouvelle \xe9tape \xe0 notre pipeline d'int\xe9gration continue. Nous allons une nouvelle fois modifier le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," pour ajouter cette nouvelle \xe9tape. Le fichier final ressemblera alors \xe0 ceci :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'stages:\n  - build\n  - test\n  - quality\n  - package\n\ncache:\n  paths:\n    - .m2/repository\n  key: "$CI_JOB_NAME"\n\nbuild_job:\n  stage: build\n  script:\n    - ./mvnw compile\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n\ntest_job:\n  stage: test\n  script:\n    - ./mvnw test\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n\ncode_quality_job:\n  stage: quality\n  image: docker:stable\n  allow_failure: true\n  services:\n    - docker:stable-dind\n  script:\n    - mkdir codequality-results\n    - docker run\n        --env CODECLIMATE_CODE="$PWD"\n        --volume "$PWD":/code\n        --volume /var/run/docker.sock:/var/run/docker.sock\n        --volume /tmp/cc:/tmp/cc\n        codeclimate/codeclimate analyze -f html > ./codequality-results/index.html\n  artifacts:\n    paths:\n      - codequality-results/\n\npackage_job:\n  stage: package\n  services:\n    - docker:stable-dind\n  variables:\n    DOCKER_HOST: tcp://docker:2375\n  script:\n    - apk add --no-cache docker\n    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY\n    - ./mvnw install -PbuildDocker -DskipTests=true -DpushImage\n      -Dhttps.protocols=TLSv1.2\n      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository\n      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN\n      -Dorg.slf4j.simpleLogger.showDateTime=true\n      -Djava.awt.headless=true\n      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\n  image: openjdk:8-alpine\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"J'ajoute dans le fichier la derni\xe8re \xe9tape de mon pipeline d'int\xe9gration continue, l'\xe9tape (le ",(0,i.kt)("em",{parentName:"p"},"stage"),") ",(0,i.kt)("inlineCode",{parentName:"p"},"package"),", qui s'ex\xe9cutera \xe0 la suite de l'\xe9tape ",(0,i.kt)("inlineCode",{parentName:"p"},"quality"),". J'ajoute ensuite le job ",(0,i.kt)("inlineCode",{parentName:"p"},"package_job")," associ\xe9 \xe0 cette \xe9tape de qualit\xe9.")),(0,i.kt)("p",null,"Ce job suppl\xe9mentaire compile le projet et ",(0,i.kt)("strong",{parentName:"p"},"l'encapsule dans un conteneur"),". Il est ensuite pouss\xe9 sur la registry de GitLab. Nous retrouvons toutes les lignes que nous avons vues pr\xe9c\xe9demment. La partie ",(0,i.kt)("inlineCode",{parentName:"p"},"script")," lance cependant quelques commandes suppl\xe9mentaires :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"tout d'abord, nous ",(0,i.kt)("strong",{parentName:"li"},"installons le client Docker")," dans l'image ",(0,i.kt)("inlineCode",{parentName:"li"},"openjdk:8-alpine")," afin de pouvoir lancer les commandes propres \xe0 Docker ;"),(0,i.kt)("li",{parentName:"ul"},"ensuite, nous ",(0,i.kt)("strong",{parentName:"li"},"nous connectons sur la registry interne de GitLab")," afin de pouvoir pousser les images Docker de fa\xe7on s\xe9curis\xe9e ;"),(0,i.kt)("li",{parentName:"ul"},"enfin, nous ",(0,i.kt)("strong",{parentName:"li"},"lan\xe7ons la commande Maven")," de cr\xe9ation de l'image Docker.")),(0,i.kt)("p",null,"Ce processus nous permettra, dans la livraison continue, de pouvoir ",(0,i.kt)("strong",{parentName:"p"},"d\xe9ployer facilement")," le m\xeame code sur diff\xe9rents environnements. Il sert aussi \xe0 figer le code compil\xe9 dans un ",(0,i.kt)("strong",{parentName:"p"},"package immuable"),". De ce fait, nous pouvons facilement red\xe9ployer le m\xeame code compil\xe9 sur n'importe quel autre environnement. Cela assure que le code ne soit pas modifi\xe9 entre deux environnements, et qu'un code test\xe9 soit ",(0,i.kt)("strong",{parentName:"p"},"d\xe9ploy\xe9 partout de la m\xeame fa\xe7on"),". Les images Docker ainsi packag\xe9es se retrouvent sur la page de la registry :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/27/15589802871223_registry.png",alt:"Registry GitLab de votre projet, avec les packages du pipeline"})),(0,i.kt)("p",null,"Nous avons maintenant toutes les \xe9tapes n\xe9cessaires pour l'int\xe9gration continue. Comme pr\xe9vu, notre code est ",(0,i.kt)("strong",{parentName:"p"},"compil\xe9")," en continu, ",(0,i.kt)("strong",{parentName:"p"},"test\xe9"),", ",(0,i.kt)("strong",{parentName:"p"},"analys\xe9")," puis ",(0,i.kt)("strong",{parentName:"p"},"packag\xe9"),", pr\xeat \xe0 \xeatre d\xe9ploy\xe9 sur de nouveaux environnements."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/29/1559125627351_1c3_illus_WHITEBG%20%280-00-17-23%29_4.png",alt:"Toutes les \xe9tapes de l'int\xe9gration continue sont impl\xe9ment\xe9es \u2705"})),(0,i.kt)("h3",{id:"les-autres-outils-de-lint\xe9gration-continue"},"Les autres outils de l'int\xe9gration continue"),(0,i.kt)("p",null,"Vous avez donc vu tout au long de cette partie comment mettre en place ",(0,i.kt)("strong",{parentName:"p"},"l'int\xe9gration continue avec GitLab"),", mais sachez qu'il existe d'autres outils reprenant les m\xeames concepts. Le plus connu et le plus utilis\xe9 d'entre eux est ",(0,i.kt)("a",{parentName:"p",href:"https://jenkins.io/"},"Jenkins"),". Avec cet outil, vous pouvez impl\xe9menter toutes les \xe9tapes pr\xe9c\xe9demment vues. De plus, Jenkins utilise maintenant un fichier de description comme GitLab, qui s'appelle ",(0,i.kt)("a",{parentName:"p",href:"https://jenkins.io/doc/book/pipeline/jenkinsfile/"},"Jenkinsfile"),"."),(0,i.kt)("p",null,"Le principe est strictement le m\xeame que ",(0,i.kt)("strong",{parentName:"p"},"GitLab")," : il s'agit d'un ",(0,i.kt)("strong",{parentName:"p"},"fichier de description du pipeline")," d'int\xe9gration continue qui va contenir toutes les \xe9tapes \xe0 lancer, afin de garantir que le code compile et soit de qualit\xe9 \xe0 tout moment. Cependant, il est n\xe9cessaire d'installer Jenkins dans votre entreprise, de le configurer, de le maintenir et de le mettre \xe0 jour, ce qui peut s'av\xe9rer ",(0,i.kt)("strong",{parentName:"p"},"long et fastidieux"),"."),(0,i.kt)("p",null,"Pour ceux qui ne voudraient pas passer leur temps \xe0 maintenir ce genre d'outils, il existe aussi d'autres outils en mode ",(0,i.kt)("strong",{parentName:"p"},"Software-as-a-Service")," (SaaS), o\xf9 la maintenance et l'\xe9volution sont garanties par le fournisseur. Ces outils peuvent \xeatre mieux adapt\xe9s pour mettre en place rapidement et sans effort un pipeline d'int\xe9gration continue. Les outils les plus connus dans cet \xe9cosyst\xe8me sont ",(0,i.kt)("a",{parentName:"p",href:"https://travis-ci.org/"},"Travis CI")," et ",(0,i.kt)("a",{parentName:"p",href:"https://circleci.com/"},"CircleCI"),"."),(0,i.kt)("p",null,"Le gros avantage de ces outils est que la ",(0,i.kt)("strong",{parentName:"p"},"maintenance")," n'est pas \xe0 la charge de l'\xe9quipe, mais du ",(0,i.kt)("strong",{parentName:"p"},"fournisseur"),". De plus, ces outils peuvent se connecter automatiquement sur Github.com pour la plupart, ce qui \xe9vite aussi les configurations longues et fastidieuses des diff\xe9rents outils."),(0,i.kt)("p",null,"Enfin, GitHub a sorti une beta de son nouveau service \xe0 destination des d\xe9veloppeurs, afin de pouvoir impl\xe9menter rapidement des pipelines d'int\xe9gration continue : ",(0,i.kt)("strong",{parentName:"p"},"GitHub Actions"),". Le principe est toujours le m\xeame : un fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".workflow")," permet de cr\xe9er un pipeline, afin de compiler et d\xe9ployer du code sur n'importe quelle plateforme. L'avantage principal de GitHub Actions est que ce dernier est directement int\xe9gr\xe9 dans GitHub."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Nous avons donc rempli les deux derni\xe8res \xe9tapes de l'int\xe9gration continue :"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"\u2705Planifiez votre d\xe9veloppement."),(0,i.kt)("li",{parentName:"ol"},"\u2705Compilez et int\xe9grez votre code."),(0,i.kt)("li",{parentName:"ol"},"\u2705Testez votre code."),(0,i.kt)("li",{parentName:"ol"},"\u2705Mesurez la qualit\xe9 de votre code."),(0,i.kt)("li",{parentName:"ol"},"\u2705G\xe9rez les livrables de votre application."))),(0,i.kt)("p",null,"Et voil\xe0 ! Vous avez mis en place toutes les \xe9tapes de l'int\xe9gration continue ! \ud83d\udc4f\ud83c\udf89"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dans la prochaine partie"),", nous mettrons en place la livraison continue, du d\xe9ploiement \xe0 la supervision, en passant par les tests en production."),(0,i.kt)("h2",{id:"exercice--mettez-en-place-le-pipeline-ci-de-votre-application-avec-gitlab"},"Exercice ! Mettez en place le pipeline CI de votre application avec GitLab"),(0,i.kt)("p",null,"Vous \xeates le nouvel ",(0,i.kt)("strong",{parentName:"p"},"ing\xe9nieur DevOps")," de l'entreprise ",(0,i.kt)("strong",{parentName:"p"},"PetClinic"),". L\u2019\xe9quipe de d\xe9veloppement se repose sur un serveur afin de compiler l\u2019application avant la livraison. Cependant, aucun test unitaire n\u2019est ex\xe9cut\xe9, et les clients se plaignent de la mauvaise qualit\xe9 de l\u2019application."),(0,i.kt)("p",null,"Votre premi\xe8re mission est de mettre en place un pipeline d\u2019int\xe9gration continue automatis\xe9 afin de compiler l\u2019application, de lancer les tests unitaires associ\xe9s, et de stocker les livrables sur un serveur afin de pr\xe9parer le d\xe9ploiement."),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("h4",{id:"objectif"},"Objectif"),(0,i.kt)("p",null,"L\u2019objectif de cette activit\xe9 est ",(0,i.kt)("strong",{parentName:"p"},"d\u2019\xe9crire le pipeline d\u2019int\xe9gration continue")," n\xe9cessaire \xe0 l\u2019int\xe9gration du projet. Pour cette activit\xe9, nous utiliserons le projet exemple Java ",(0,i.kt)("strong",{parentName:"p"},"PetClinic")," comme vu dans ce cours, mais dans sa version non microservice."),(0,i.kt)("h4",{id:"donn\xe9es"},"Donn\xe9es"),(0,i.kt)("p",null,"Les donn\xe9es sont le ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spring-projects/spring-petclinic"},"repository GitHub du projet Petclinic"),". Ce repository contient tous les \xe9l\xe9ments n\xe9cessaires au fonctionnement de l\u2019application. Ces \xe9l\xe9ments sont :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"le code source ;"),(0,i.kt)("li",{parentName:"ul"},"les tests unitaires ;"),(0,i.kt)("li",{parentName:"ul"},"la documentation.")),(0,i.kt)("h4",{id:"instructions"},"Instructions"),(0,i.kt)("p",null,"Clonez le repository dans votre repository GitLab, et mettez en place un pipeline d\u2019int\xe9gration continue contenant chacune des \xe9tapes n\xe9cessaires \xe0 sa bonne ex\xe9cution."),(0,i.kt)("p",null,"Comme vu dans ce cours, ces \xe9tapes sont les 4 \xe9tapes de l\u2019int\xe9gration continue : ",(0,i.kt)("strong",{parentName:"p"},"compilation"),", ",(0,i.kt)("strong",{parentName:"p"},"test"),", ",(0,i.kt)("strong",{parentName:"p"},"qualit\xe9")," et gestion des ",(0,i.kt)("strong",{parentName:"p"},"livrables")," (package + deploy)."),(0,i.kt)("p",null,"Afin de pouvoir livrer l\u2019application et la stocker sous GitLab, vous aurez besoin de modifier le fichier pom.xml et d'ajouter un fichier ci-settings.xml \xe0 la racine de votre projet. Pour vous aider, voici les fichiers :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"le ",(0,i.kt)("a",{parentName:"li",href:"https://s3-eu-west-1.amazonaws.com/course.oc-static.com/courses/2035736/activit%C3%A9/pom.xml"},"pom.xml"),", vous pouvez directement remplacer votre pom.xml par celui-ci ;"),(0,i.kt)("li",{parentName:"ul"},"le ",(0,i.kt)("a",{parentName:"li",href:"https://s3-eu-west-1.amazonaws.com/course.oc-static.com/courses/2035736/activit%C3%A9/ci-settings.xml"},"ci-settings.xml")," \xe0 ajouter \xe0 la racine de votre projet.")),(0,i.kt)("p",null,"Ces fichiers doivent contenir le n\xe9cessaire afin de pouvoir s\u2019authentifier aupr\xe8s du repository de GitLab, ainsi qu\u2019avoir les droits n\xe9cessaires pour envoyer le livrable g\xe9n\xe9r\xe9. Pour ceci, vous pouvez vous inspirer de ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/project/packages/maven_repository.html"},"la page officielle de GitLab"),"."),(0,i.kt)("p",null,"Une image Docker a \xe9t\xe9 pr\xe9par\xe9e pour vous afin de faciliter toutes les \xe9tapes de l'int\xe9gration continue, et contenant tous les outils n\xe9cessaires au bon d\xe9roulement des \xe9tapes."),(0,i.kt)("p",null,"Une fois toutes les \xe9tapes valid\xe9es, ",(0,i.kt)("strong",{parentName:"p"},"une phrase sera affich\xe9e")," dans les logs de l'\xe9tape de d\xe9ploiement. C'est en voyant cette phrase que vous saurez que vous avez r\xe9ussi cette mission !"),(0,i.kt)("p",null,"Le nom de l'image \xe0 utiliser dans le ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," est l'image ",(0,i.kt)("inlineCode",{parentName:"p"},"laurentgrangeau/oc-devops:latest")),(0,i.kt)("h3",{id:"question"},"Question"),(0,i.kt)("p",null,"Quelle est la phrase affich\xe9e lors de l'\xe9tape de d\xe9ploiement ?"),(0,i.kt)("h3",{id:"r\xe9ponse"},"R\xe9ponse"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Voir la r\xe9ponse"),"Something small enough to escape casual notice."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"quest-ce-que-la-livraison-continue-"},"Qu'est-ce que la livraison continue ?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"La livraison continue")," est la suite logique de l'int\xe9gration continue. Dans l'int\xe9gration continue, nous cherchons \xe0 ce que le code ",(0,i.kt)("strong",{parentName:"p"},"compile")," bien, mais aussi qu'il soit ",(0,i.kt)("strong",{parentName:"p"},"fonctionnel")," en production et de ",(0,i.kt)("strong",{parentName:"p"},"qualit\xe9"),", en lan\xe7ant le plus r\xe9guli\xe8rement possible les ",(0,i.kt)("strong",{parentName:"p"},"tests unitaires"),". Mais il existe d'autres ",(0,i.kt)("strong",{parentName:"p"},"types")," de tests, tout aussi importants, pour garantir la qualit\xe9 du code. Ces tests ne peuvent cependant pas \xeatre lanc\xe9s sans avoir un environnement d\xe9ploy\xe9."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Attention, la ",(0,i.kt)("strong",{parentName:"p"},"livraison continue")," ne doit pas \xeatre confondue avec le ",(0,i.kt)("strong",{parentName:"p"},"d\xe9ploiement continu"),", qui est la suite logique de la livraison continue. Ces deux disciplines ont comme objectif de d\xe9ployer une application en production. La diff\xe9rence se trouve dans l'automatisation du d\xe9ploiement en production. La livraison continue s'arr\xeate avant la production, et la mise en production reste un acte manuel (que ce soit avec un outil, ou automatis\xe9 via un clic de bouton, ou bien manuellement). La mise en production est soumise alors \xe0 la ",(0,i.kt)("strong",{parentName:"p"},"validation d'un \xeatre humain"),". ",(0,i.kt)("br",null),(0,i.kt)("br",null),"\nLe ",(0,i.kt)("strong",{parentName:"p"},"d\xe9ploiement continu"),", quant \xe0 lui, est l'extension de la livraison continue : le d\xe9ploiement se fait de mani\xe8re ",(0,i.kt)("strong",{parentName:"p"},"automatis\xe9e")," par un pipeline. Toutes les \xe9tapes de compilation, tests unitaires et autres tests automatis\xe9s doivent \xeatre alors au vert avant de proc\xe9der au d\xe9ploiement.")),(0,i.kt)("p",null,"La ",(0,i.kt)("strong",{parentName:"p"},"livraison continue")," est une discipline o\xf9 l'application est construite de mani\xe8re \xe0 pouvoir \xeatre mise en production \xe0 n'importe quel moment."),(0,i.kt)("p",null,"Pour atteindre la mise en oeuvre de la livraison continue sur une application, il est n\xe9cessaire de mettre en place plusieurs \xe9tapes suppl\xe9mentaires au sein de notre pipeline."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour mettre en place la ",(0,i.kt)("strong",{parentName:"p"},"livraison continue"),", vous devez mettre en place ",(0,i.kt)("strong",{parentName:"p"},"5 \xe9tapes")," :"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"La codification de l'infrastructure avec l'",(0,i.kt)("strong",{parentName:"li"},"Infrastructure-as-Code"),"."),(0,i.kt)("li",{parentName:"ol"},"Le ",(0,i.kt)("strong",{parentName:"li"},"d\xe9ploiement")," de votre application."),(0,i.kt)("li",{parentName:"ol"},"Le ",(0,i.kt)("strong",{parentName:"li"},"test")," de votre application en environnement de test."),(0,i.kt)("li",{parentName:"ol"},"La ",(0,i.kt)("strong",{parentName:"li"},"supervision")," de l'application."),(0,i.kt)("li",{parentName:"ol"},"La mise en place de ",(0,i.kt)("strong",{parentName:"li"},"notifications")," d'alerte."))),(0,i.kt)("h3",{id:"\xe9tape-1--codifiez-votre-infrastructure-avec-linfrastructure-as-code"},"\xc9tape 1 : Codifiez votre infrastructure avec l'Infrastructure-as-Code"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"L'",(0,i.kt)("strong",{parentName:"p"},"Infrastructure-as-Code")," est une pratique qui consiste \xe0 ",(0,i.kt)("strong",{parentName:"p"},"d\xe9crire une infrastructure avec du code"),". Ce code est alors stock\xe9 avec le code de l'application, et fait partie int\xe9grante de cette derni\xe8re.")),(0,i.kt)("p",null,"Les avantages sont nombreux :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"possibilit\xe9 de cr\xe9er des environnements ",(0,i.kt)("strong",{parentName:"li"},"\xe0 la demande")," ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"cr\xe9ation d'environnement en quelques minutes"),", contre plusieurs semaines dans une entreprise classique ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pilotage de l'infrastructure")," gr\xe2ce au pipeline de livraison continue ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"connaissance des logiciels")," install\xe9s sur la plateforme, gr\xe2ce \xe0 l'outillage ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"mont\xe9e de version")," des environnements automatis\xe9s.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Les outils principaux de l'Infrastructure-as-Code sont ",(0,i.kt)("strong",{parentName:"p"},"Docker"),", ",(0,i.kt)("strong",{parentName:"p"},"Chef"),", ",(0,i.kt)("strong",{parentName:"p"},"Puppet"),", ",(0,i.kt)("strong",{parentName:"p"},"Ansible")," et ",(0,i.kt)("strong",{parentName:"p"},"Terraform"),".")),(0,i.kt)("h3",{id:"\xe9tape-2--d\xe9ployez-votre-application"},"\xc9tape 2 : D\xe9ployez votre application"),(0,i.kt)("p",null,"L'\xe9tape la plus importante de la livraison continue est le ",(0,i.kt)("strong",{parentName:"p"},"d\xe9ploiement du package")," que nous avons pr\xe9c\xe9demment cr\xe9\xe9 lors de l'int\xe9gration continue. Les avantages d'utiliser un outil pour ",(0,i.kt)("strong",{parentName:"p"},"automatiser le d\xe9ploiement")," de l'application sont nombreux :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"cela permet \xe0 l'\xe9quipe de ",(0,i.kt)("strong",{parentName:"li"},"se concentrer sur le d\xe9veloppement"),", l\xe0 o\xf9 elle a sa valeur \xe0 ajouter ;"),(0,i.kt)("li",{parentName:"ul"},"n'importe qui dans l'\xe9quipe peut d\xe9ployer des logiciels ;"),(0,i.kt)("li",{parentName:"ul"},"les d\xe9ploiements deviennent beaucoup moins sujets aux ",(0,i.kt)("strong",{parentName:"li"},"erreurs")," et beaucoup plus ",(0,i.kt)("strong",{parentName:"li"},"reproductibles")," ;"),(0,i.kt)("li",{parentName:"ul"},"d\xe9ployer sur un ",(0,i.kt)("strong",{parentName:"li"},"nouvel environnement")," est facile ;"),(0,i.kt)("li",{parentName:"ul"},"les d\xe9ploiements peuvent \xeatre ",(0,i.kt)("strong",{parentName:"li"},"tr\xe8s fr\xe9quents"),".")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour pouvoir d\xe9ployer les artefacts pr\xe9c\xe9demment cr\xe9\xe9s, vous pourrez utiliser ",(0,i.kt)("strong",{parentName:"p"},"Spinnaker"),", ",(0,i.kt)("strong",{parentName:"p"},"XLDeploy")," ou ",(0,i.kt)("strong",{parentName:"p"},"UrbanCode"),".")),(0,i.kt)("h3",{id:"\xe9tape-3--testez-votre-application"},"\xc9tape 3 : Testez votre application"),(0,i.kt)("p",null,"C'est dans cette \xe9tape que nous allons ajouter ",(0,i.kt)("strong",{parentName:"p"},"d'autres types de tests"),", plus pertinents et plus fonctionnels, afin de garantir que l'application ",(0,i.kt)("strong",{parentName:"p"},"fonctionne comme nous l'avons estim\xe9"),"."),(0,i.kt)("p",null,"L'avantage de tester \xe0 ce stade du pipeline est que l'application tourne sur un environnement de test, ",(0,i.kt)("strong",{parentName:"p"},"presque identique \xe0 celui de la production"),". Son comportement sera donc le plus fid\xe8le possible \xe0 celui qu'elle aura en production."),(0,i.kt)("p",null,"Ces tests peuvent \xeatre de diff\xe9rents types :"),(0,i.kt)("h4",{id:"test-dacceptance"},"Test d'acceptance"),(0,i.kt)("p",null,"Les ",(0,i.kt)("strong",{parentName:"p"},"tests d'acceptance")," sont des tests formels ex\xe9cut\xe9s pour v\xe9rifier si un syst\xe8me satisfait \xe0 ses exigences op\xe9rationnelles. Ils exigent que l'application enti\xe8re soit op\xe9rationnelle et se concentrent sur la r\xe9plication des comportements des utilisateurs. Mais ils peuvent aussi aller plus loin en mesurant la performance du syst\xe8me, et rejeter les changements si certains objectifs ne sont pas atteints."),(0,i.kt)("p",null,"Ces tests peuvent \xeatre ",(0,i.kt)("strong",{parentName:"p"},"automatis\xe9s"),", mais aussi ",(0,i.kt)("strong",{parentName:"p"},"manuels"),", avec une \xe9quipe de test d\xe9di\xe9e qui regardera si le logiciel correspond au besoin."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour lancer des tests d'acceptance, vous pourrez utiliser ",(0,i.kt)("strong",{parentName:"p"},"Confluence"),", ",(0,i.kt)("strong",{parentName:"p"},"FitNesse")," ou ",(0,i.kt)("strong",{parentName:"p"},"Ranorex"),".")),(0,i.kt)("h4",{id:"test-de-performance"},"Test de performance"),(0,i.kt)("p",null,"Les ",(0,i.kt)("strong",{parentName:"p"},"tests de performance")," v\xe9rifient le comportement du syst\xe8me lorsqu'il est soumis \xe0 une charge importante. Ces tests ne sont pas fonctionnels et peuvent prendre diff\xe9rentes formes pour comprendre la fiabilit\xe9, la stabilit\xe9 et la disponibilit\xe9 de la plateforme. Par exemple, il peut s'agir d'observer les temps de r\xe9ponse lors de l'ex\xe9cution d'un grand nombre de requ\xeates, ou de voir comment le syst\xe8me se comporte avec une quantit\xe9 importante de donn\xe9es."),(0,i.kt)("p",null,"Les tests de performance sont par nature assez co\xfbteux \xe0 mettre en \u0153uvre et \xe0 ex\xe9cuter, mais ils peuvent vous aider \xe0 comprendre si de nouveaux changements vont d\xe9grader votre syst\xe8me."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour faire des tests de performance, vous pourrez utiliser ",(0,i.kt)("strong",{parentName:"p"},"JMeter"),", ",(0,i.kt)("strong",{parentName:"p"},"Apache Bench")," ou ",(0,i.kt)("strong",{parentName:"p"},"Gatling"),".")),(0,i.kt)("h4",{id:"smoke-test"},"Smoke test"),(0,i.kt)("p",null,"Les ",(0,i.kt)("strong",{parentName:"p"},"smoke tests")," sont des tests de base qui v\xe9rifient les fonctionnalit\xe9s de base de l'application. Ils sont con\xe7us pour \xeatre rapides \xe0 ex\xe9cuter, et leur but est de vous donner l'assurance que les ",(0,i.kt)("strong",{parentName:"p"},"principales caract\xe9ristiques de votre syst\xe8me fonctionnent comme pr\xe9vu"),". Ils peuvent \xeatre utiles juste apr\xe8s une nouvelle build, pour d\xe9cider si vous pouvez ou non ex\xe9cuter des tests plus co\xfbteux, ou juste apr\xe8s un d\xe9ploiement pour s'assurer que l'application fonctionne correctement dans le nouvel environnement d\xe9ploy\xe9."),(0,i.kt)("p",null,"Par exemple, les smoke tests peuvent s'assurer que la base de donn\xe9es r\xe9pond et est correctement configur\xe9e, mais aussi que les diff\xe9rents composants sont pr\xe9sents et envoient des donn\xe9es correctes, comme des API qui devraient r\xe9pondre un code HTTP 200, ou une page web qui devrait s'afficher."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour s'assurer du bon fonctionnement de l'application, vous pourrez utiliser ",(0,i.kt)("strong",{parentName:"p"},"Selenium"),", ",(0,i.kt)("strong",{parentName:"p"},"SoapUI")," ou ",(0,i.kt)("strong",{parentName:"p"},"Cypress"),".")),(0,i.kt)("h3",{id:"\xe9tape-4--supervisez-le-comportement-de-votre-application"},"\xc9tape 4 : Supervisez le comportement de votre application"),(0,i.kt)("p",null,"Le ",(0,i.kt)("strong",{parentName:"p"},"monitoring"),", ou ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"supervision")),", intervient une fois que notre application est d\xe9ploy\xe9e sur un environnement, que ce soit un environnement de ",(0,i.kt)("strong",{parentName:"p"},"staging"),", de ",(0,i.kt)("strong",{parentName:"p"},"test"),", de ",(0,i.kt)("strong",{parentName:"p"},"d\xe9monstration")," ou bien l'environnement de ",(0,i.kt)("strong",{parentName:"p"},"production")," lui-m\xeame."),(0,i.kt)("p",null,"Le principe est de ",(0,i.kt)("strong",{parentName:"p"},"r\xe9cup\xe9rer certaines m\xe9triques")," qui ont du sens pour ceux qui interviennent sur l'application. Cela peut \xeatre par exemple le nombre de connexions HTTP, le nombre de requ\xeates \xe0 la base de donn\xe9es, le temps de r\xe9ponse de certaines pages ; mais aussi des m\xe9triques plus orient\xe9es m\xe9tier, comme le chiffre d'affaires g\xe9n\xe9r\xe9, ou le nombre de personnes inscrites sur l'application."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour avoir un monitoring de vos applications, vous pourrez utiliser la suite ",(0,i.kt)("strong",{parentName:"p"},"Elastic"),", ",(0,i.kt)("strong",{parentName:"p"},"Prometheus")," ou ",(0,i.kt)("strong",{parentName:"p"},"Graylog"),".")),(0,i.kt)("p",null,"Les m\xe9triques peuvent \xeatre aussi sur la partie livraison en elle-m\xeame, ou sur le processus de d\xe9veloppement. Par exemple, l'\xe9quipe peut mesurer le nombre de d\xe9ploiements qu'elle effectue par jour, ou encore deux autres indicateurs qui sont importants afin de voir la performance de l'\xe9quipe sur la correction d'erreurs qui peuvent survenir en production :"),(0,i.kt)("h4",{id:"le-mean-time-between-failure"},"Le Mean-Time-Between-Failure"),(0,i.kt)("p",null,"Le ",(0,i.kt)("strong",{parentName:"p"},"Mean-Time-Between-Failure")," (ou MTBF) est le temps moyen qui s\xe9pare deux erreurs en production. Plus ce temps est \xe9lev\xe9, plus le syst\xe8me est stable et fiable, notamment du fait de la qualit\xe9 des tests qui sont jou\xe9s lors de la livraison continue."),(0,i.kt)("h4",{id:"le-mean-time-to-recover"},"Le Mean-Time-To-Recover"),(0,i.kt)("p",null,"Le ",(0,i.kt)("strong",{parentName:"p"},"Mean-Time-To-Recover")," (ou MTTR) est le temps moyen de correction entre deux erreurs de production. Plus ce temps est faible, plus l'\xe9quipe est apte \xe0 d\xe9tecter des erreurs et \xe0 les corriger rapidement."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Des outils comme ",(0,i.kt)("strong",{parentName:"p"},"Dynatrace"),", ",(0,i.kt)("strong",{parentName:"p"},"Sysdig")," ou ",(0,i.kt)("strong",{parentName:"p"},"New Relic")," permettent d'avoir ces m\xe9triques.")),(0,i.kt)("h3",{id:"\xe9tape-5--mettez-en-place-des-notifications-dalertes"},"\xc9tape 5 : Mettez en place des notifications d'alertes"),(0,i.kt)("p",null,"La premi\xe8re version d'une nouvelle fonctionnalit\xe9 ou d'un nouveau produit ne couvre souvent pas enti\xe8rement les besoins des clients. M\xeame lorsque l'\xe9quipe passe des semaines ou des mois \xe0 construire quelque chose, le produit final est souvent vou\xe9 \xe0 manquer des fonctionnalit\xe9s importantes. C'est le principe du ",(0,i.kt)("strong",{parentName:"p"},"Minimum Viable Product")," (MVP) en Agile."),(0,i.kt)("p",null,"Il arrive donc tr\xe8s souvent de livrer des logiciels ",(0,i.kt)("strong",{parentName:"p"},"incomplets ou bugg\xe9s"),", si l'\xe9quipe veut aller assez vite. Au lieu de vouloir \xe9viter cela, il est n\xe9cessaire d'adopter l'id\xe9e de ",(0,i.kt)("strong",{parentName:"p"},"livrer des petites pi\xe8ces de valeur"),"."),(0,i.kt)("p",null,"En livrant ",(0,i.kt)("strong",{parentName:"p"},"plus vite"),", nous pouvons r\xe9parer les bugs ",(0,i.kt)("strong",{parentName:"p"},"tant que les livraisons restent petites"),", et que nous savons ce qui a \xe9t\xe9 modifi\xe9 dans l'application. Quand les d\xe9veloppements grossissent, ils deviennent plus difficiles \xe0 g\xe9rer et \xe0 remanier. Un feedback rapide, gr\xe2ce aux ",(0,i.kt)("strong",{parentName:"p"},"tests en production")," et au ",(0,i.kt)("strong",{parentName:"p"},"monitoring"),", permet d'intervenir et de corriger le probl\xe8me d\xe8s que possible. Il nous permet d'apprendre des clients, et des erreurs, au bon moment."),(0,i.kt)("p",null,"Une fois le d\xe9ploiement fini et les diff\xe9rents tests effectu\xe9s, il est n\xe9cessaire d'avoir un feedback rapide de l'utilisation du logiciel. En effet, si le d\xe9ploiement de la nouvelle version du logiciel apporte des bugs malgr\xe9 les diff\xe9rents tests effectu\xe9s, il faut alors les d\xe9tecter le plus rapidement possible, afin de pouvoir proposer une nouvelle correction au logiciel."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pour avoir un feedback rapide de vos d\xe9ploiements, vous pourrez tout simplement utiliser ",(0,i.kt)("strong",{parentName:"p"},"Slack"),", ",(0,i.kt)("strong",{parentName:"p"},"Trello")," ou ",(0,i.kt)("strong",{parentName:"p"},"Twitter"),". ")),(0,i.kt)("h2",{id:"codifiez-votre-infrastructure"},"Codifiez votre infrastructure"),(0,i.kt)("h3",{id:"construisez-les-images-de-votre-application-avec-docker"},"Construisez les images de votre application avec Docker"),(0,i.kt)("p",null,"Notre application PetClinic est construite \xe0 partir de fichiers, nomm\xe9s ",(0,i.kt)("inlineCode",{parentName:"p"},"dockerfiles"),", d\xe9j\xe0 pr\xe9sents dans le contr\xf4le de code source. Ces ",(0,i.kt)("inlineCode",{parentName:"p"},"dockerfiles")," sont pr\xe9sents dans le r\xe9pertoire ",(0,i.kt)("inlineCode",{parentName:"p"},"Docker")," du projet et contiennent les lignes suivantes :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM openjdk:8-jre-alpine\n\nVOLUME /tmp\n\nARG DOCKERIZE_VERSION\nARG ARTIFACT_NAME\nARG EXPOSED_PORT\n\nENV SPRING_PROFILES_ACTIVE docker\n\nADD https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-alpine-linux-amd64-${DOCKERIZE_VERSION}.tar.gz dockerize.tar.gz\nRUN tar xzf dockerize.tar.gz\nRUN chmod +x dockerize\n\nADD ${ARTIFACT_NAME}.jar /app.jar\n\nRUN touch /app.jar\n\nEXPOSE ${EXPOSED_PORT}\n\nENTRYPOINT ["java", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseCGroupMemoryLimitForHeap", "-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\n')),(0,i.kt)("p",null,"Ce ",(0,i.kt)("inlineCode",{parentName:"p"},"dockerfile")," part d'une image qui contient d\xe9j\xe0 ",(0,i.kt)("strong",{parentName:"p"},"la version 8 de Java")," et copie tous les .jar des diff\xe9rents projets, afin de construire les diff\xe9rentes images associ\xe9es. Enfin, la derni\xe8re \xe9tape de ce ",(0,i.kt)("inlineCode",{parentName:"p"},"dockerfile")," est de lancer la commande ",(0,i.kt)("inlineCode",{parentName:"p"},"Java")," avec le jar associ\xe9."),(0,i.kt)("p",null,"Dans cette partie du cours, vous allez modifier le ",(0,i.kt)("inlineCode",{parentName:"p"},"dockerfile")," pour voir l'impact de l'Infrastructure-as-Code sur votre pipeline de d\xe9ploiement. Pour ce faire, ouvrez le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," pr\xe9sent dans le dossier Docker, afin de modifier la version du runtime de Java en version ",(0,i.kt)("inlineCode",{parentName:"p"},"openjdk:13-alpine")," :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586191895254_change-openjdk.png",alt:"Changez la version de l'openjdk dans le dockerfile"})),(0,i.kt)("p",null,"Avant de pousser ce fichier sur Git, vous allez modifier la version de release de chaque ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml")," pr\xe9sent dans le projet, pour incr\xe9menter le num\xe9ro de version des images Docker cr\xe9\xe9es, et ainsi ne pas \xe9craser les versions pr\xe9c\xe9demment build\xe9es :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586192536832_modify-pom.png",alt:"Changez la version des images Docker cr\xe9\xe9es dans les fichiers pom.xml"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Il y a plusieurs ",(0,i.kt)("inlineCode",{parentName:"strong"},"pom.xml")," o\xf9 il faut ajouter le bon num\xe9ro de version !")),(0,i.kt)("p",null,"Une fois ces modifications faites, poussez les fichiers sur Git :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git add .\ngit commit -m "Modification de la version de Java et incr\xe9mentation du num\xe9ro de version"\ngit push origin master\n')),(0,i.kt)("p",null,"Le pipeline d'int\xe9gration continue devrait se lancer :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586193101822_pipeline-launch.png",alt:"Le pipeline se lance \xe0 nouveau"})),(0,i.kt)("p",null,"Et la registry Docker devrait contenir les nouvelles images build\xe9es gr\xe2ce au pipeline."),(0,i.kt)("p",null,"Vous venez de voir \xe0 quel point l'",(0,i.kt)("strong",{parentName:"p"},"Infrastructure-as-Code")," est pratique pour tester rapidement le changement de version d'un framework, ou le changement de version d'un middleware comme Apache ou IIS. En ne changeant que quelques lignes, nous pouvons alors relancer tout le pipeline, afin de voir s'il y a un impact sur le code applicatif."),(0,i.kt)("h3",{id:"d\xe9ployez-votre-application-avec-docker-compose"},"D\xe9ployez votre application avec Docker Compose"),(0,i.kt)("p",null,"L'Infrastructure-as-Code ne s'arr\xeate pas l\xe0. Dans le cas de Docker, toute l'application peut \xeatre d\xe9ploy\xe9e gr\xe2ce au fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," qui contient toute la d\xe9finition de l'application, la relation entre les images Docker et le sens de d\xe9marrage de celles-ci."),(0,i.kt)("p",null,"Le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," pr\xe9sent dans le repository Git d\xe9finit des images en dur. Vous allez ",(0,i.kt)("strong",{parentName:"p"},"remplacer le nom des images par les nouvelles images que vous venez de cr\xe9er"),"."),(0,i.kt)("p",null,"Remplacez alors toutes les lignes contenant ",(0,i.kt)("inlineCode",{parentName:"p"},"mszarlinski/")," par votre nom de registry (chez moi, ",(0,i.kt)("inlineCode",{parentName:"p"},"registry.gitlab.com/laurentgrangeau/"),"). De plus, ajoutez aussi en bout de ligne le num\xe9ro de version de l'image que vous venez de cr\xe9er ",(0,i.kt)("inlineCode",{parentName:"p"},":2.0.7")),(0,i.kt)("p",null,"Le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," devrait ressembler \xe0 ceci (le fichier est volontairement tronqu\xe9) :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'version: \'2\'\n\nvolumes:\n  graf-data:\n\nservices:\n  config-server:\n    image: registry.gitlab.com/laurentgrangeau/spring-petclinic-microservices/spring-petclinic-config-server:2.0.7\n    container_name: config-server\n    mem_limit: 512M\n    ports:\n     - 8888:8888\n\n  discovery-server:\n    image: registry.gitlab.com/laurentgrangeau/spring-petclinic-microservices/spring-petclinic-discovery-server:2.0.7\n    container_name: discovery-server\n    mem_limit: 512M\n    depends_on:\n      - config-server\n    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=120s","--","java", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseCGroupMemoryLimitForHeap", "-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\n    ports:\n     - 8761:8761\n\n...\n')),(0,i.kt)("p",null,"Et voil\xe0, vos fichiers Docker et Docker Compose sont pr\xeats \xe0 \xeatre lanc\xe9s par votre pipeline de livraison continue."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Nous avons donc rempli la premi\xe8re \xe9tape de la livraison continue : "),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"\u2705La codification de l'infrastructure avec l'",(0,i.kt)("strong",{parentName:"li"},"Infrastructure-as-Code"),"."),(0,i.kt)("li",{parentName:"ol"},"Le ",(0,i.kt)("strong",{parentName:"li"},"d\xe9ploiement")," de votre application."),(0,i.kt)("li",{parentName:"ol"},"Le ",(0,i.kt)("strong",{parentName:"li"},"test")," de votre application en environnement de test."),(0,i.kt)("li",{parentName:"ol"},"La ",(0,i.kt)("strong",{parentName:"li"},"supervision")," de l'application."),(0,i.kt)("li",{parentName:"ol"},"La mise en place de ",(0,i.kt)("strong",{parentName:"li"},"notifications")," d'alerte."))),(0,i.kt)("h2",{id:"d\xe9ployez-et-testez-votre-code-sur-diff\xe9rents-environnements"},"D\xe9ployez et testez votre code sur diff\xe9rents environnements"),(0,i.kt)("h3",{id:"pr\xe9parez-votre-environnement-de-travail"},"Pr\xe9parez votre environnement de travail"),(0,i.kt)("p",null,"Afin de vous faciliter la t\xe2che et de ne pas installer des d\xe9pendances inutiles, je vous conseille de cr\xe9er un environnement sur le site ",(0,i.kt)("a",{parentName:"p",href:"https://labs.play-with-docker.com/"},"Play-With-Docker"),". Ce site va vous permettre de cr\xe9er une infrastructure Docker rapidement. Rendez-vous sur le site, et connectez-vous avec vos identifiants Docker Hub."),(0,i.kt)("p",null,"Une fois connect\xe9, une session de 4 heures est cr\xe9\xe9e afin de vous permettre de d\xe9ployer vos images. Sur la page d'accueil, cliquez sur l'ic\xf4ne \ud83d\udd27 et s\xe9lectionnez le template ",(0,i.kt)("strong",{parentName:"p"},"3 Managers and 2 Workers"),"."),(0,i.kt)("p",null,"Cela va vous cr\xe9er un cluster Docker Swarm, n\xe9cessaire au d\xe9ploiement des images. Une fois le cluster cr\xe9\xe9, vous allez r\xe9cup\xe9rer l'URL de l'environnement. Il suffit de copier l'URL pr\xe9sente dans la case SSH."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586194362038_pwd-ssh.png",alt:"Copiez l'URL SSH de votre Docker Swarm sur le Play-With-Docker"})),(0,i.kt)("p",null,"Cette URL sera utilis\xe9e pour configurer l'environnement de d\xe9ploiement dans le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml"),". Maintenant, modifiez ce fichier pour ajouter deux nouvelles lignes. La premi\xe8re ligne \xe0 ajouter est au niveau de ",(0,i.kt)("inlineCode",{parentName:"p"},"variables"),". Cette nouvelle variable va contenir l'URL copi\xe9e pr\xe9c\xe9demment (",(0,i.kt)("inlineCode",{parentName:"p"},"ip172-18-0-51-bihm1906chi000b37l6g")," chez moi) :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"PWD: ip172-18-0-51-bihm1906chi000b37l6g\n")),(0,i.kt)("p",null,"La deuxi\xe8me ligne est \xe0 ajouter juste apr\xe8s l'\xe9tape ",(0,i.kt)("inlineCode",{parentName:"p"},"package"),". Cette \xe9tape suppl\xe9mentaire sera le d\xe9ploiement des images sur un environnement de staging :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"deploy_staging_job:\n  stage: deploy\n  image: docker:stable\n  script:\n    - apk add --no-cache openssh-client py-pip python-dev libffi-dev openssl-dev gcc libc-dev make\n    - pip install docker-compose\n    - export DOCKER_HOST=tcp://$PLAYWD.direct.labs.play-with-docker.com:2375\n    - docker-compose down\n    - docker-compose up -d\n  environment:\n    name: staging\n    url: http://$PLAYWD-8080.direct.labs.play-with-docker.com\n")),(0,i.kt)("p",null,"La syntaxe est la m\xeame que les pr\xe9c\xe9dentes \xe9tapes. Dans la partie script, nous avons ajout\xe9 la copie du fichier ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),", ainsi que le dossier ",(0,i.kt)("inlineCode",{parentName:"p"},"docker"),". Enfin, nous d\xe9marrons le projet gr\xe2ce \xe0 Docker Compose."),(0,i.kt)("p",null,"Si tout s'est bien pass\xe9, vous devriez voir appara\xeetre dans vos environnements (",(0,i.kt)("em",{parentName:"p"},"Op\xe9rations > Environnements"),"), le nouvel environnement ",(0,i.kt)("strong",{parentName:"p"},"Staging"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586195611102_env-staging.png",alt:"Votre nouvel environnement de staging"})),(0,i.kt)("p",null,'Vous pouvez alors cliquer sur le lien "',(0,i.kt)("em",{parentName:"p"},"Open live environment"),"\" sur la droite de cet environnement, afin de voir l'application d\xe9ploy\xe9e."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586196079905_petclinic.png",alt:"Votre application d\xe9ploy\xe9e"})),(0,i.kt)("p",null,"Maintenant que l'environnement ",(0,i.kt)("strong",{parentName:"p"},"Staging")," est d\xe9ploy\xe9, il est possible de lancer des tests impossibles \xe0 lancer lors de la phase d'int\xe9gration continue. Dans ce cours, nous allons lancer un test de performance, afin de mesurer les temps de r\xe9ponse de l'application. Pour ce faire, vous allez utiliser Apache Benchmark pour simuler de la charge sur le serveur."),(0,i.kt)("p",null,"Il faut alors ajouter de nouvelles lignes dans le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml"),", afin de lancer les tests de performance sur le nouvel environnement :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'performance_job:\n  stage: performance\n  image: docker:git\n  variables:\n    URL: http://$PLAYWD-8080.direct.labs.play-with-docker.com/\n  services:\n    - docker:stable-dind\n  script:\n    - apk add --no-cache curl\n    - x=1; while [[ "$(curl -s -o /dev/null -w \'\'%{http_code}\'\' http://$PLAYWD-8080.direct.labs.play-with-docker.com/)" != "200" || $x -le 60 ]]; do sleep 5; echo $(( x++ )); done || false\n    - mkdir gitlab-exporter\n    - wget -O ./gitlab-exporter/index.js https://gitlab.com/gitlab-org/gl-performance/raw/master/index.js\n    - mkdir sitespeed-results\n    - docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:6.3.1 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results $URL\n    - mv sitespeed-results/data/performance.json performance.json\n  artifacts:\n    paths:\n      - sitespeed-results/\n    reports:\n      performance: performance.json\n')),(0,i.kt)("p",null,"Dans ce nouveau bloc, la syntaxe reste la m\xeame. Nous r\xe9cup\xe9rons dans un premier temps l'utilitaire de test de performance dans le bloc ",(0,i.kt)("inlineCode",{parentName:"p"},"script"),". Nous lan\xe7ons ensuite une application qui va se charger de tester notre site et d'en extraire des m\xe9triques de performance. Ces m\xe9triques sont ensuite upload\xe9es sur GitLab afin d'\xeatre accessibles."),(0,i.kt)("p",null,"Ensuite, modifiez aussi le d\xe9but du fichier afin d'ajouter une nouvelle ligne dans le bloc ",(0,i.kt)("inlineCode",{parentName:"p"},"stages")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"stages:\n  - build\n  - test\n  - quality\n  - package\n  - deploy\n  - performance\n")),(0,i.kt)("p",null,"Enfin, une fois l'environnement de staging d\xe9ploy\xe9 et test\xe9, il ne reste plus qu'\xe0 d\xe9ployer l'application sur l'environnement de production. Pour cela, vous allez une nouvelle fois modifier le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," afin d'ajouter l'\xe9tape de mise en production :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"deploy_prod_job:\n  stage: deploy\n  image: docker:stable\n  script:\n    - apk add --no-cache openssh-client py-pip python-dev libffi-dev openssl-dev gcc libc-dev make\n    - pip install docker-compose\n    - export DOCKER_HOST=tcp://$PLAYWD.direct.labs.play-with-docker.com:2375\n    - docker-compose down\n    - docker-compose up -d\n  environment:\n    name: prod\n    url: http://$PLAYWD-8080.direct.labs.play-with-docker.com\n  when: manual\n")),(0,i.kt)("p",null,"Dans cette \xe9tape, nous ajoutons le mot cl\xe9 ",(0,i.kt)("inlineCode",{parentName:"p"},"when: manual")," afin de ne d\xe9ployer en production qu'avec l'intervention d'un \xeatre humain. La validation est requise afin de savoir s'il existe des erreurs lors du d\xe9ploiement sur ",(0,i.kt)("strong",{parentName:"p"},"staging"),". Si des erreurs existent, il n'y aura alors pas de mise en production."),(0,i.kt)("p",null,"Sur votre pipeline de livraison continue, le d\xe9ploiement manuel est symbolis\xe9 par l'ic\xf4ne \u25b6\ufe0f \xe0 c\xf4t\xe9 de l'\xe9tape ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy_prod")," :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586196445312_manual-deploy.png",alt:"Le d\xe9ploiement manuel sur GitLab CI"})),(0,i.kt)("p",null,"Ces erreurs seront analys\xe9es lors de la prochaine \xe9tape : le ",(0,i.kt)("strong",{parentName:"p"},"monitoring"),"."),(0,i.kt)("p",null,"Enfin, une technique largement utilis\xe9e lors de l'utilisation de la livraison continue est le ",(0,i.kt)("strong",{parentName:"p"},"Canary Release"),". Le principe du ",(0,i.kt)("strong",{parentName:"p"},"Canary Release")," est le m\xeame que dans les mines de charbon. \xc0 l'\xe9poque, les mineurs de charbon qui descendait \xe0 la mine pla\xe7aient un canari devant eux, au bout d'une perche dans une cage. Si le canari mourait, cela voulait dire que l'air \xe9tait non respirable et les mineurs avaient le temps de rebrousser chemin afin d'\xe9viter un sort fatal."),(0,i.kt)("p",null,"Le principe est le m\xeame dans le d\xe9ploiement : une partie seulement des utilisateurs vont \xeatre redirig\xe9s vers la nouvelle version de production, et si quelque chose se passe mal, il n'y aura uniquement qu'une petite partie des utilisateurs qui sera impact\xe9e. Pour le mettre en place sur notre projet, modifiez le fichier ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," en ajoutant un nouveau bloc ",(0,i.kt)("inlineCode",{parentName:"p"},"canary")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"canary_job:\n  stage: canary\n  image: docker:stable\n  script:\n    - apk add --no-cache openssh-client py-pip python-dev libffi-dev openssl-dev gcc libc-dev make\n    - pip install docker-compose\n    - export DOCKER_HOST=tcp://$PLAYWD.direct.labs.play-with-docker.com:2375\n    - docker-compose down\n    - docker-compose up -d\n  environment:\n    name: prod\n    url: http://$PLAYWD-8080.direct.labs.play-with-docker.com\n  when: manual\n  only:\n    - master\n")),(0,i.kt)("p",null,"Le principe ici est exactement le m\xeame que la production, la diff\xe9rence \xe9tant que le d\xe9ploiement en canary est d\xe9corr\xe9l\xe9 de la production."),(0,i.kt)("p",null,"Ensuite, modifiez le d\xe9but du fichier afin que dans le bloc ",(0,i.kt)("inlineCode",{parentName:"p"},"stages")," soit ajout\xe9e l'\xe9tape ",(0,i.kt)("inlineCode",{parentName:"p"},"canary")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"stages:\n  - build\n  - test\n  - quality\n  - package\n  - canary\n  - deploy\n  - performance\n")),(0,i.kt)("p",null,"Nous avons maintenant un environnement qui se d\xe9ploie en parall\xe8le de la production, et qui contient uniquement une sous-partie des utilisateurs. Cet environnement sera tr\xe8s utile afin de faire des analyses en temps r\xe9el du comportement de l'application, et voir s'il n'y a pas d'erreurs."),(0,i.kt)("p",null,"Nous avons maintenant un pipeline complet de livraison continue, de la compilation du projet au d\xe9ploiement sur un environnement de ",(0,i.kt)("strong",{parentName:"p"},"staging"),", une possibilit\xe9 de d\xe9ploiement en production via l'intervention d'une personne de l'\xe9quipe d'ops, par exemple, et un environnement Canary qui contient un sous-ensemble des utilisateurs, afin de voir comment se comporte l'application."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Nous avons donc rempli les \xe9tapes 2 et 3 de la livraison continue :  "),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"\u2705La codification de l'infrastructure avec l'",(0,i.kt)("strong",{parentName:"li"},"Infrastructure-as-Code"),"."),(0,i.kt)("li",{parentName:"ol"},"\u2705Le ",(0,i.kt)("strong",{parentName:"li"},"d\xe9ploiement")," de votre application."),(0,i.kt)("li",{parentName:"ol"},"\u2705Le ",(0,i.kt)("strong",{parentName:"li"},"test")," de votre application en environnement de test."),(0,i.kt)("li",{parentName:"ol"},"La ",(0,i.kt)("strong",{parentName:"li"},"supervision")," de l'application."),(0,i.kt)("li",{parentName:"ol"},"La mise en place de ",(0,i.kt)("strong",{parentName:"li"},"notifications")," d'alerte."))),(0,i.kt)("h2",{id:"monitorez-votre-application"},"Monitorez votre application"),(0,i.kt)("p",null,"Afin de savoir si le d\xe9ploiement d'un syst\xe8me s'est bien d\xe9roul\xe9, il est n\xe9cessaire de le monitorer, ou le ",(0,i.kt)("strong",{parentName:"p"},"superviser"),". Cela permet de ",(0,i.kt)("strong",{parentName:"p"},"prendre des d\xe9cisions")," plus rapides, comme le rollback automatique d'une application si celle-ci ne fonctionne pas."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Les deux derni\xe8res \xe9tapes")," de notre pipeline de livraison continue sont donc le ",(0,i.kt)("strong",{parentName:"p"},"monitoring")," de l'application, afin de savoir si celle-ci fonctionne correctement, ou pr\xe9sente des erreurs, ainsi que l'activation de notifications en cas de probl\xe8me, pour avoir un ",(0,i.kt)("strong",{parentName:"p"},"feedback rapide"),"."),(0,i.kt)("h3",{id:"supervisez-votre-application-avec-prometheus"},"Supervisez votre application avec Prometheus"),(0,i.kt)("p",null,"Dans cette section, vous allez ajouter dans GitLab la r\xe9cup\xe9ration des m\xe9triques de l'application. Lors du d\xe9ploiement de l'application, des m\xe9triques sont expos\xe9es par ",(0,i.kt)("strong",{parentName:"p"},"Prometheus"),", qui est un des composants de notre stack technique."),(0,i.kt)("p",null,"Le serveur Prometheus est accessible sur le port 9091, auquel vous pouvez acc\xe9der en cliquant sur le num\xe9ro de port 9091 qui est apparu sur le site Play-with-Docker :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586223806345_pwd-prometheus.png",alt:"Acc\xe9dez \xe0 Prometheus via le Play-with-Docker"})),(0,i.kt)("p",null,"Ce serveur Prothemeus r\xe9cup\xe8re \xe9norm\xe9ment de m\xe9triques de l'application, des syst\xe8mes sous-jacents, ainsi que des images Docker, comme le nombre de connexions par seconde, le nombre de connexions total, etc. Il expose aussi des m\xe9triques applicatives, comme le nombre d'animaux cr\xe9\xe9s ou mis \xe0 jour."),(0,i.kt)("p",null,"Pour r\xe9cup\xe9rer ces m\xe9triques dans GitLab, il suffit d'aller dans le menu ",(0,i.kt)("strong",{parentName:"p"},"Settings"),", ",(0,i.kt)("strong",{parentName:"p"},"Integrations"),", puis ",(0,i.kt)("strong",{parentName:"p"},"Prometheus"),"."),(0,i.kt)("p",null,"Ensuite, il faut activer l'int\xe9gration avec Prometheus, et le configurer. Cochez la case ",(0,i.kt)("strong",{parentName:"p"},"Active"),", renseignez l'URL du serveur Prometheus ; dans mon cas : ",(0,i.kt)("inlineCode",{parentName:"p"},"http://ip172-18-0-8-biiabu86chi000em9j9g-9091.direct.labs.play-with-docker.com/"),"et sauvegardez :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586225480542_prometheus.png",alt:"Configurez Prometheus"})),(0,i.kt)("p",null,"Nous allons ensuite d\xe9finir une m\xe9trique que nous allons suivre, afin de voir si l'application \xe0 un probl\xe8me. Cliquez alors sur ",(0,i.kt)("strong",{parentName:"p"},"New Metric")," et ajoutez les informations suivantes :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586226004055_new-metric.png",alt:"Configurez une nouvelle m\xe9trique sur Prometheus"})),(0,i.kt)("p",null,"GitLab va alors r\xe9cup\xe9rer la m\xe9trique ",(0,i.kt)("inlineCode",{parentName:"p"},"http_server_requests_seconds_count")," depuis le serveur Prometheus, et l'ajouter dans sa base de donn\xe9es interne. Suite \xe0 cela, nous pouvons alors voir les graphes de ces m\xe9triques dans le menu ",(0,i.kt)("strong",{parentName:"p"},"Operations"),", puis ",(0,i.kt)("strong",{parentName:"p"},"Metrics")," o\xf9 nous avons l'\xe9volution des connexions HTTP au fur et \xe0 mesure du temps :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/1558622656011_metrics.png",alt:"Observez vos m\xe9triques"})),(0,i.kt)("p",null,"Ces m\xe9triques sont tr\xe8s utiles pour prendre des d\xe9cisions sur le d\xe9ploiement en production. Ici, nous voyons que les connexions HTTP se font bien, et nous sommes donc confiants sur la mise en production."),(0,i.kt)("p",null,"D'autres types de m\xe9triques sont aussi accessibles via GitLab, afin de prendre des d\xe9cisions et voir la productivit\xe9 de l'\xe9quipe."),(0,i.kt)("p",null,"Par exemple, lors du pr\xe9c\xe9dent chapitre, vous avez d\xe9ploy\xe9 un environnement Canary afin d'analyser le comportement de l'application. Pour voir comment cet environnement se comporte et si celui-ci est viable, allez dans le menu ",(0,i.kt)("strong",{parentName:"p"},"Operations"),", puis ",(0,i.kt)("strong",{parentName:"p"},"Environments"),". Vous devriez voir votre nouvel environnement ",(0,i.kt)("inlineCode",{parentName:"p"},"canary")," et voir les m\xe9triques associ\xe9es :"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586227065086_canary.png",alt:"Les m\xe9triques associ\xe9es \xe0 Canary"})),(0,i.kt)("p",null,"Pour voir la performance et la productivit\xe9 de l'\xe9quipe, GitLab int\xe8gre aussi des m\xe9triques concernant le code, les issues, ou encore le temps d'ex\xe9cution des tests. Ces diff\xe9rentes m\xe9triques sont disponibles dans le menu Project, sous-menu Cycle Analytics."),(0,i.kt)("p",null,"Les m\xe9triques les plus int\xe9ressantes sont celles qui fournissent des indicateurs sur la v\xe9locit\xe9 et la productivit\xe9 de l'\xe9quipe. Par exemple, il est possible de voir ",(0,i.kt)("strong",{parentName:"p"},"le temps entre la cr\xe9ation d'une issue et sa r\xe9solution")," dans la rubrique Review."),(0,i.kt)("p",null,"Il est possible de voir aussi le temps de d\xe9ploiement sur les diff\xe9rents environnements. Plus cette valeur est petite, plus il est facile de d\xe9ployer sur les environnements. Par exemple, dans l'exemple ci-dessous, le temps de d\xe9ploiement sur l'environnement de Staging est de 3 minutes en moyenne. Avec un temps de d\xe9ploiement aussi court, il est facile de d\xe9ployer une correction en production assez rapidement."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/1558622961915_metrics-staging.png",alt:"M\xe9trique sur le temps de d\xe9ploiement"})),(0,i.kt)("p",null,"Il y a aussi d'autres m\xe9triques qui existent, concernant le code. Par exemple, vous pouvez voir le nombre de commits, ainsi que les diff\xe9rents contributeurs dans le menu Repository, sous-menu Contributors."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586230184054_commiters.png",alt:"M\xe9triques sur les contributeurs"})),(0,i.kt)("p",null,"Il est aussi int\xe9ressant de voir le nombre de commits par jours, pour \xe9valuer le temps de travail de chaque d\xe9veloppeur. Cette m\xe9trique est disponible dans le m\xeame menu, sous-menu Charts."),(0,i.kt)("h3",{id:"mettez-en-place-des-notifications-slack"},"Mettez en place des notifications Slack"),(0,i.kt)("p",null,"La derni\xe8re \xe9tape est l'\xe9tape de ",(0,i.kt)("strong",{parentName:"p"},"feedback rapide"),". Cette \xe9tape est celle qui va nous permettre de faire le lien entre la ",(0,i.kt)("strong",{parentName:"p"},"production")," (ops), et les ",(0,i.kt)("strong",{parentName:"p"},"d\xe9veloppeurs")," (dev). C'est une \xe9tape qui donne de la visibilit\xe9 aux d\xe9veloppeurs sur des probl\xe8mes qu'il peut y avoir en production. ",(0,i.kt)("strong",{parentName:"p"},"Plus rapide est la d\xe9tection des probl\xe8mes, plus rapide est leur correction"),". "),(0,i.kt)("p",null,"Cette \xe9tape est le lien final qui permet d'avoir notre am\xe9lioration continue durant tout le cycle de vie de l'application. GitLab permet l'int\xe9gration avec beaucoup d'applications tierces. L'int\xe9gration la plus simple est l'int\xe9gration email. Afin d'int\xe9grer GitLab avec l'email, allez dans le menu Settings, sous-menu Integrations. Dans ce menu, choisissez \"Email on push\". Sur le prochain \xe9cran, cochez la case Active, renseignez votre mail et cliquez sur \"Test settings and save changes\"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586230769625_integration-mail.png",alt:"Activez les notifications"})),(0,i.kt)("p",null,"Vous allez maintenant \xeatre alert\xe9 des diff\xe9rents commits qu'il pourrait y avoir sur le contr\xf4le de code source. Mais l'int\xe9gration n'est que partielle avec l'email. Le mieux est d'int\xe9grer un outil comme Slack qui prendra toutes les notifications de GitLab, et les affichera dans un channel d\xe9di\xe9 \xe0 votre application. Pour int\xe9grer Slack, il suffit d'aller dans le menu Integrations, et de choisir Slack Notifications."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586231586449_integration-slack.png",alt:"Activez les notifications Slack"})),(0,i.kt)("p",null,"De cette page, vous allez \xeatre invit\xe9 \xe0 cr\xe9er un webhook Slack afin de l'int\xe9grer dans votre repository GitLab."),(0,i.kt)("p",null,"Choisissez un channel d\xe9di\xe9 \xe0 votre application afin de recevoir tous les messages associ\xe9s. Attention, les messages sont nombreux. Je vous conseille de ne pas l'ajouter dans le channel G\xe9n\xe9ral."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586232034197_slack-integration.png",alt:"Configurez le channel Slack o\xf9 recevoir les notifications"})),(0,i.kt)("p",null,"Une fois le webhook cr\xe9\xe9, copiez l'URL d\xe9livr\xe9e par Slack afin de la coller dans GitLab."),(0,i.kt)("p",null,"Lorsque l'int\xe9gration avec Slack est finie, vous recevrez tous les messages des \xe9v\xe9nements GitLab dans le channel associ\xe9."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user.oc-static.com/upload/2019/05/23/15586232703011_slack.png",alt:"Slack avec vos notifications de GitLab"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Nous avons donc rempli les deux derni\xe8res \xe9tapes de la livraison continue : "),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"\u2705La codification de l'infrastructure avec l'",(0,i.kt)("strong",{parentName:"li"},"Infrastructure-as-Code"),"."),(0,i.kt)("li",{parentName:"ol"},"\u2705Le ",(0,i.kt)("strong",{parentName:"li"},"d\xe9ploiement")," de votre application."),(0,i.kt)("li",{parentName:"ol"},"\u2705Le ",(0,i.kt)("strong",{parentName:"li"},"test")," de votre application en environnement de test."),(0,i.kt)("li",{parentName:"ol"},"\u2705La ",(0,i.kt)("strong",{parentName:"li"},"supervision")," de l'application."),(0,i.kt)("li",{parentName:"ol"},"\u2705La mise en place de ",(0,i.kt)("strong",{parentName:"li"},"notifications")," d'alerte."))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"annexes"},"Annexes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://openclassrooms.com/fr/courses/2035736-mettez-en-place-lintegration-et-la-livraison-continues-avec-la-demarche-devops"},"Mettez en place l'int\xe9gration et la livraison continues avec la d\xe9marche DevOps - OpenClassroom")," ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.linkedin.com/learning/paths/devenir-expert-experte-en-devops?u=56745737"},"Devenir expert / experte en DevOps - LinkedIn Learning ")," ;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment"},"Continuous integration vs. continuous delivery vs. continuous deployment - Atlasian")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=Xrgk023l4lI"},"DevOps In 5 Minutes | What Is DevOps? - Simplilearn (Youtube)"))),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"R\xe9alis\xe9 en Markdown avec ",(0,i.kt)("a",{parentName:"em",href:"https://dillinger.io/"},"Dillinger")," - Par ",(0,i.kt)("a",{parentName:"em",href:"https://www.nicolas-barbarisi.com"},"Nicolas Barbarisi"))))}d.isMDXComponent=!0}}]);